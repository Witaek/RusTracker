{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2","program":"/home/guilhem/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","zmq","--edition=2018","/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"zmq_has\"","-C","metadata=7dce249d9f58d3cd","-C","extra-filename=-7dce249d9f58d3cd","--out-dir","/home/guilhem/git/RusTracker/source/target/rls/debug/deps","-L","dependency=/home/guilhem/git/RusTracker/source/target/rls/debug/deps","--extern","bitflags=/home/guilhem/git/RusTracker/source/target/rls/debug/deps/libbitflags-bebecc21b0a7c1f6.rmeta","--extern","libc=/home/guilhem/git/RusTracker/source/target/rls/debug/deps/liblibc-fd2b5df20b220e2b.rmeta","--extern","log=/home/guilhem/git/RusTracker/source/target/rls/debug/deps/liblog-ba0afbb7033fa694.rmeta","--extern","zmq_sys=/home/guilhem/git/RusTracker/source/target/rls/debug/deps/libzmq_sys-c7838e18d6f3eac7.rmeta","--cap-lints","allow","-L","native=/usr/lib/x86_64-linux-gnu","--error-format=json","--sysroot","/home/guilhem/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/guilhem/git/RusTracker/source/target/rls/debug/deps/libzmq-7dce249d9f58d3cd.rmeta"},"prelude":{"crate_id":{"name":"zmq","disambiguator":[5984777725654169698,0]},"crate_root":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src","external_crates":[{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14026078687029744792,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5443730852259234579,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4162025702538114948,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17612152343462746361,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5560808256873132085,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[135160560163186024,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5800521777261530329,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7095478770525139037,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17225897750877482818,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15613653607383163471,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[12428323400248712701,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[11893279639181573711,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[13583305032161054644,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16609837797022023111,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[18098459435141129808,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[15244551393771456017,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[6576340271055396708,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[15284510821186066958,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12982807908830018159,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":20,"id":{"name":"bitflags","disambiguator":[15917436305182542096,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":21,"id":{"name":"libc","disambiguator":[7494242181442760606,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":22,"id":{"name":"log","disambiguator":[8147683544257590759,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":23,"id":{"name":"cfg_if","disambiguator":[1004283514336169005,0]}},{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","num":24,"id":{"name":"zmq_sys","disambiguator":[4295037084857968252,0]}}],"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":0,"byte_end":45246,"line_start":1,"line_end":1319,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":592,"byte_end":599,"line_start":34,"line_end":34,"column_start":25,"column_end":32},"alias_span":null,"name":"Message","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":628,"byte_end":629,"line_start":35,"line_end":35,"column_start":28,"column_end":29},"alias_span":null,"name":"*","value":"XSUB, PULL, REP, PUB, STREAM, PUSH, DEALER, SUB, XPUB, ROUTER, REQ, PAIR","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":0,"byte_end":45246,"line_start":1,"line_end":1319,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":141},{"krate":0,"index":207},{"krate":0,"index":210},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":371},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":216},{"krate":0,"index":404},{"krate":0,"index":453},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":219},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":461},{"krate":0,"index":470},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":535},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":225},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":544},{"krate":0,"index":546},{"krate":0,"index":249},{"krate":0,"index":253},{"krate":0,"index":255},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":646},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":652},{"krate":0,"index":655},{"krate":0,"index":662},{"krate":0,"index":664},{"krate":0,"index":666},{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":693},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":701},{"krate":0,"index":703},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":711},{"krate":0,"index":713},{"krate":0,"index":716},{"krate":0,"index":719},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":323},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":733},{"krate":0,"index":738},{"krate":0,"index":337},{"krate":0,"index":740},{"krate":0,"index":746},{"krate":0,"index":343},{"krate":0,"index":345},{"krate":0,"index":347},{"krate":0,"index":349},{"krate":0,"index":748},{"krate":0,"index":754},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356}],"decl_id":null,"docs":" Module: zmq\n","sig":null,"attributes":[{"value":"/ Module: zmq","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":0,"byte_end":15,"line_start":1,"line_end":1,"column_start":1,"column_end":16}},{"value":"allow(trivial_numeric_casts)","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":17,"byte_end":49,"line_start":3,"line_end":3,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":91},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":45910,"byte_end":45917,"line_start":21,"line_end":21,"column_start":12,"column_end":19},"name":"Message","qualname":"::message::Message","value":"Message {  }","parent":null,"children":[{"krate":0,"index":92}],"decl_id":null,"docs":" Holds a 0MQ message.","sig":null,"attributes":[{"value":"/ Holds a 0MQ message.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":45411,"byte_end":45435,"line_start":11,"line_end":11,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":45436,"byte_end":45439,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ A message is a single frame, either received or created locally and then","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":45440,"byte_end":45516,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ sent over the wire. Multipart messages are transmitted as multiple","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":45517,"byte_end":45587,"line_start":14,"line_end":14,"column_start":1,"column_end":71}},{"value":"/ `Message`s.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":45588,"byte_end":45603,"line_start":15,"line_end":15,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":45604,"byte_end":45607,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ In rust-zmq, you aren't required to create message objects if you use the","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":45608,"byte_end":45685,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ convenience APIs provided (e.g. `Socket::recv_bytes()` or","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":45686,"byte_end":45747,"line_start":18,"line_end":18,"column_start":1,"column_end":62}},{"value":"/ `Socket::send()`). However, using message objects can make multiple","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":45748,"byte_end":45819,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/ operations in a loop more efficient, since allocated memory can be reused.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":45820,"byte_end":45898,"line_start":20,"line_end":20,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":46747,"byte_end":46750,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"new","qualname":"<Message>::new","value":"pub fn new() -> Message","parent":null,"children":[],"decl_id":null,"docs":" Create an empty `Message`.\n","sig":null,"attributes":[{"value":"/ Create an empty `Message`.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":46705,"byte_end":46735,"line_start":57,"line_end":57,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":47359,"byte_end":47384,"line_start":72,"line_end":72,"column_start":19,"column_end":44},"name":"with_capacity_unallocated","qualname":"<Message>::with_capacity_unallocated","value":"pub unsafe fn with_capacity_unallocated(usize) -> Message","parent":null,"children":[],"decl_id":null,"docs":" Create a `Message` preallocated with `len` uninitialized bytes.","sig":null,"attributes":[{"value":"/ Create a `Message` preallocated with `len` uninitialized bytes.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":46842,"byte_end":46909,"line_start":62,"line_end":62,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":46914,"byte_end":46917,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ Since it is very easy to introduce undefined behavior using this","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":46922,"byte_end":46990,"line_start":64,"line_end":64,"column_start":5,"column_end":73}},{"value":"/ function, its use is not recommended, and it will be removed in a future","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":46995,"byte_end":47071,"line_start":65,"line_end":65,"column_start":5,"column_end":81}},{"value":"/ release. If there is a use-case that cannot be handled efficiently by","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":47076,"byte_end":47149,"line_start":66,"line_end":66,"column_start":5,"column_end":78}},{"value":"/ the safe message constructors, please file an issue.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":47154,"byte_end":47210,"line_start":67,"line_end":67,"column_start":5,"column_end":61}},{"value":"deprecated(since = \"0.9.1\", note =\n             \"This method has an unintuitive name, and should not be needed.\")","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":47215,"byte_end":47340,"line_start":68,"line_end":71,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":47720,"byte_end":47729,"line_start":81,"line_end":81,"column_start":12,"column_end":21},"name":"with_size","qualname":"<Message>::with_size","value":"pub fn with_size(usize) -> Message","parent":null,"children":[],"decl_id":null,"docs":" Create a `Message` with space for `len` bytes that are initialized to 0.\n","sig":null,"attributes":[{"value":"/ Create a `Message` with space for `len` bytes that are initialized to 0.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":47632,"byte_end":47708,"line_start":80,"line_end":80,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":48161,"byte_end":48174,"line_start":94,"line_end":94,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Message>::with_capacity","value":"pub fn with_capacity(usize) -> Message","parent":null,"children":[],"decl_id":null,"docs":" Create a `Message` with space for `len` bytes that are initialized to 0.\n","sig":null,"attributes":[{"value":"/ Create a `Message` with space for `len` bytes that are initialized to 0.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":47923,"byte_end":47999,"line_start":89,"line_end":89,"column_start":5,"column_end":81}},{"value":"deprecated(since = \"0.9.1\", note =\n             \"This method has a name which does not match its semantics. Use `with_size` instead\")","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":48004,"byte_end":48149,"line_start":90,"line_end":93,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":48474,"byte_end":48484,"line_start":102,"line_end":102,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Message>::from_slice","value":"pub fn from_slice(&[u8]) -> Message","parent":null,"children":[],"decl_id":null,"docs":" Create a `Message` from a `&[u8]`. This will copy `data` into the message.","sig":null,"attributes":[{"value":"/ Create a `Message` from a `&[u8]`. This will copy `data` into the message.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":48240,"byte_end":48318,"line_start":98,"line_end":98,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":48323,"byte_end":48326,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to using the `From<&[u8]>` trait.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":48331,"byte_end":48387,"line_start":100,"line_end":100,"column_start":5,"column_end":61}},{"value":"deprecated(since = \"0.9.1\", note = \"Use the `From` trait instead.\")","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":48392,"byte_end":48462,"line_start":101,"line_end":101,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":48629,"byte_end":48635,"line_start":107,"line_end":107,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Message>::as_str","value":"pub fn as_str(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Return the message content as a string slice if it is valid UTF-8.\n","sig":null,"attributes":[{"value":"/ Return the message content as a string slice if it is valid UTF-8.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":48547,"byte_end":48617,"line_start":106,"line_end":106,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":48823,"byte_end":48831,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"get_more","qualname":"<Message>::get_more","value":"pub fn get_more(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return the `ZMQ_MORE` flag, which indicates if more parts of a multipart\n message will follow.\n","sig":null,"attributes":[{"value":"/ Return the `ZMQ_MORE` flag, which indicates if more parts of a multipart","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":48706,"byte_end":48782,"line_start":111,"line_end":111,"column_start":5,"column_end":81}},{"value":"/ message will follow.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":48787,"byte_end":48811,"line_start":112,"line_end":112,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":49489,"byte_end":49493,"line_start":130,"line_end":130,"column_start":12,"column_end":16},"name":"gets","qualname":"<Message>::gets","value":"pub fn gets<'a>(&'a mut Self, &str) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" Query a message metadata property.","sig":null,"attributes":[{"value":"/ Query a message metadata property.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":48938,"byte_end":48976,"line_start":118,"line_end":118,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":48981,"byte_end":48984,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Non-UTF8 values","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":48989,"byte_end":49010,"line_start":120,"line_end":120,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":49015,"byte_end":49018,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ The `zmq_msg_gets` man page notes \"The encoding of the property and","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":49023,"byte_end":49094,"line_start":122,"line_end":122,"column_start":5,"column_end":76}},{"value":"/ value shall be UTF8\". However, this is not actually enforced. For API","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":49099,"byte_end":49172,"line_start":123,"line_end":123,"column_start":5,"column_end":78}},{"value":"/ compatibility reasons, this function will return `None` when","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":49177,"byte_end":49241,"line_start":124,"line_end":124,"column_start":5,"column_end":69}},{"value":"/ encountering a non-UTF8 value; so a missing and a non-UTF8 value cannot","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":49246,"byte_end":49321,"line_start":125,"line_end":125,"column_start":5,"column_end":80}},{"value":"/ currently be distinguished.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":49326,"byte_end":49357,"line_start":126,"line_end":126,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":49362,"byte_end":49365,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ This is considered a bug in the bindings, and will be fixed with the","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":49370,"byte_end":49442,"line_start":128,"line_end":128,"column_start":5,"column_end":77}},{"value":"/ next API-breaking release.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":49447,"byte_end":49477,"line_start":129,"line_end":129,"column_start":5,"column_end":35}}]},{"kind":"Type","id":{"krate":0,"index":214},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":673,"byte_end":679,"line_start":38,"line_end":38,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" `zmq`-specific Result type.\n","sig":null,"attributes":[{"value":"/ `zmq`-specific Result type.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":632,"byte_end":663,"line_start":37,"line_end":37,"column_start":1,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":372},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":827,"byte_end":831,"line_start":44,"line_end":44,"column_start":5,"column_end":9},"name":"PAIR","qualname":"::SocketType::PAIR","value":"SocketType::PAIR","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":374},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":837,"byte_end":840,"line_start":45,"line_end":45,"column_start":5,"column_end":8},"name":"PUB","qualname":"::SocketType::PUB","value":"SocketType::PUB","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":376},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":846,"byte_end":849,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"SUB","qualname":"::SocketType::SUB","value":"SocketType::SUB","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":378},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":855,"byte_end":858,"line_start":47,"line_end":47,"column_start":5,"column_end":8},"name":"REQ","qualname":"::SocketType::REQ","value":"SocketType::REQ","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":380},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":864,"byte_end":867,"line_start":48,"line_end":48,"column_start":5,"column_end":8},"name":"REP","qualname":"::SocketType::REP","value":"SocketType::REP","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":382},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":873,"byte_end":879,"line_start":49,"line_end":49,"column_start":5,"column_end":11},"name":"DEALER","qualname":"::SocketType::DEALER","value":"SocketType::DEALER","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":384},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":885,"byte_end":891,"line_start":50,"line_end":50,"column_start":5,"column_end":11},"name":"ROUTER","qualname":"::SocketType::ROUTER","value":"SocketType::ROUTER","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":386},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":897,"byte_end":901,"line_start":51,"line_end":51,"column_start":5,"column_end":9},"name":"PULL","qualname":"::SocketType::PULL","value":"SocketType::PULL","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":388},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":907,"byte_end":911,"line_start":52,"line_end":52,"column_start":5,"column_end":9},"name":"PUSH","qualname":"::SocketType::PUSH","value":"SocketType::PUSH","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":390},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":917,"byte_end":921,"line_start":53,"line_end":53,"column_start":5,"column_end":9},"name":"XPUB","qualname":"::SocketType::XPUB","value":"SocketType::XPUB","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":392},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":927,"byte_end":931,"line_start":54,"line_end":54,"column_start":5,"column_end":9},"name":"XSUB","qualname":"::SocketType::XSUB","value":"SocketType::XSUB","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":394},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":937,"byte_end":943,"line_start":55,"line_end":55,"column_start":5,"column_end":11},"name":"STREAM","qualname":"::SocketType::STREAM","value":"SocketType::STREAM","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":371},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":810,"byte_end":820,"line_start":43,"line_end":43,"column_start":10,"column_end":20},"name":"SocketType","qualname":"::SocketType","value":"pub enum SocketType {\n    PAIR,\n    PUB,\n    SUB,\n    REQ,\n    REP,\n    DEALER,\n    ROUTER,\n    PULL,\n    PUSH,\n    XPUB,\n    XSUB,\n    STREAM,\n}","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394}],"decl_id":null,"docs":" Socket types\n","sig":null,"attributes":[{"value":"/ Socket types","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":712,"byte_end":728,"line_start":40,"line_end":40,"column_start":1,"column_end":17}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":729,"byte_end":759,"line_start":41,"line_end":41,"column_start":1,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":405},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":2341,"byte_end":2350,"line_start":100,"line_end":100,"column_start":5,"column_end":14},"name":"CONNECTED","qualname":"::SocketEvent::CONNECTED","value":"SocketEvent::CONNECTED","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":408},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":2396,"byte_end":2411,"line_start":101,"line_end":101,"column_start":5,"column_end":20},"name":"CONNECT_DELAYED","qualname":"::SocketEvent::CONNECT_DELAYED","value":"SocketEvent::CONNECT_DELAYED","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":411},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":2463,"byte_end":2478,"line_start":102,"line_end":102,"column_start":5,"column_end":20},"name":"CONNECT_RETRIED","qualname":"::SocketEvent::CONNECT_RETRIED","value":"SocketEvent::CONNECT_RETRIED","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":414},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":2530,"byte_end":2539,"line_start":103,"line_end":103,"column_start":5,"column_end":14},"name":"LISTENING","qualname":"::SocketEvent::LISTENING","value":"SocketEvent::LISTENING","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":417},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":2585,"byte_end":2596,"line_start":104,"line_end":104,"column_start":5,"column_end":16},"name":"BIND_FAILED","qualname":"::SocketEvent::BIND_FAILED","value":"SocketEvent::BIND_FAILED","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":420},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":2644,"byte_end":2652,"line_start":105,"line_end":105,"column_start":5,"column_end":13},"name":"ACCEPTED","qualname":"::SocketEvent::ACCEPTED","value":"SocketEvent::ACCEPTED","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":423},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":2697,"byte_end":2710,"line_start":106,"line_end":106,"column_start":5,"column_end":18},"name":"ACCEPT_FAILED","qualname":"::SocketEvent::ACCEPT_FAILED","value":"SocketEvent::ACCEPT_FAILED","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":426},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":2760,"byte_end":2766,"line_start":107,"line_end":107,"column_start":5,"column_end":11},"name":"CLOSED","qualname":"::SocketEvent::CLOSED","value":"SocketEvent::CLOSED","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":429},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":2809,"byte_end":2821,"line_start":108,"line_end":108,"column_start":5,"column_end":17},"name":"CLOSE_FAILED","qualname":"::SocketEvent::CLOSE_FAILED","value":"SocketEvent::CLOSE_FAILED","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":432},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":2870,"byte_end":2882,"line_start":109,"line_end":109,"column_start":5,"column_end":17},"name":"DISCONNECTED","qualname":"::SocketEvent::DISCONNECTED","value":"SocketEvent::DISCONNECTED","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":435},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":2931,"byte_end":2946,"line_start":110,"line_end":110,"column_start":5,"column_end":20},"name":"MONITOR_STOPPED","qualname":"::SocketEvent::MONITOR_STOPPED","value":"SocketEvent::MONITOR_STOPPED","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":438},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":2998,"byte_end":3024,"line_start":111,"line_end":111,"column_start":5,"column_end":31},"name":"HANDSHAKE_FAILED_NO_DETAIL","qualname":"::SocketEvent::HANDSHAKE_FAILED_NO_DETAIL","value":"SocketEvent::HANDSHAKE_FAILED_NO_DETAIL","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":441},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":3087,"byte_end":3106,"line_start":112,"line_end":112,"column_start":5,"column_end":24},"name":"HANDSHAKE_SUCCEEDED","qualname":"::SocketEvent::HANDSHAKE_SUCCEEDED","value":"SocketEvent::HANDSHAKE_SUCCEEDED","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":444},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":3162,"byte_end":3187,"line_start":113,"line_end":113,"column_start":5,"column_end":30},"name":"HANDSHAKE_FAILED_PROTOCOL","qualname":"::SocketEvent::HANDSHAKE_FAILED_PROTOCOL","value":"SocketEvent::HANDSHAKE_FAILED_PROTOCOL","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":447},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":3249,"byte_end":3270,"line_start":114,"line_end":114,"column_start":5,"column_end":26},"name":"HANDSHAKE_FAILED_AUTH","qualname":"::SocketEvent::HANDSHAKE_FAILED_AUTH","value":"SocketEvent::HANDSHAKE_FAILED_AUTH","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":450},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":3328,"byte_end":3331,"line_start":115,"line_end":115,"column_start":5,"column_end":8},"name":"ALL","qualname":"::SocketEvent::ALL","value":"SocketEvent::ALL","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":404},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":2256,"byte_end":2267,"line_start":98,"line_end":98,"column_start":10,"column_end":21},"name":"SocketEvent","qualname":"::SocketEvent","value":"pub enum SocketEvent {\n    CONNECTED = ,\n    CONNECT_DELAYED = ,\n    CONNECT_RETRIED = ,\n    LISTENING = ,\n    BIND_FAILED = ,\n    ACCEPTED = ,\n    ACCEPT_FAILED = ,\n    CLOSED = ,\n    CLOSE_FAILED = ,\n    DISCONNECTED = ,\n    MONITOR_STOPPED = ,\n    HANDSHAKE_FAILED_NO_DETAIL = ,\n    HANDSHAKE_SUCCEEDED = ,\n    HANDSHAKE_FAILED_PROTOCOL = ,\n    HANDSHAKE_FAILED_AUTH = ,\n    ALL = ,\n}","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":408},{"krate":0,"index":411},{"krate":0,"index":414},{"krate":0,"index":417},{"krate":0,"index":420},{"krate":0,"index":423},{"krate":0,"index":426},{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":441},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":450}],"decl_id":null,"docs":" Socket Events\n","sig":null,"attributes":[{"value":"/ Socket Events","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":2157,"byte_end":2174,"line_start":95,"line_end":95,"column_start":1,"column_end":18}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":2175,"byte_end":2205,"line_start":96,"line_end":96,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":3400,"byte_end":3406,"line_start":119,"line_end":119,"column_start":12,"column_end":18},"name":"to_raw","qualname":"<SocketEvent>::to_raw","value":"pub fn to_raw(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":3507,"byte_end":3515,"line_start":124,"line_end":124,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<SocketEvent>::from_raw","value":"pub fn from_raw(u16) -> SocketEvent","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":223},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":4784,"byte_end":4792,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"name":"DONTWAIT","qualname":"::DONTWAIT","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Flag for socket `send` methods that specifies non-blocking mode.\n","sig":null,"attributes":[{"value":"/ Flag for socket `send` methods that specifies non-blocking mode.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":4704,"byte_end":4772,"line_start":148,"line_end":148,"column_start":1,"column_end":69}}]},{"kind":"Static","id":{"krate":0,"index":224},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":4948,"byte_end":4955,"line_start":152,"line_end":152,"column_start":12,"column_end":19},"name":"SNDMORE","qualname":"::SNDMORE","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Flag for socket `send` methods that specifies that more frames of a\n multipart message will follow.\n","sig":null,"attributes":[{"value":"/ Flag for socket `send` methods that specifies that more frames of a","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":4830,"byte_end":4901,"line_start":150,"line_end":150,"column_start":1,"column_end":72}},{"value":"/ multipart message will follow.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":4902,"byte_end":4936,"line_start":151,"line_end":151,"column_start":1,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":462},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5141,"byte_end":5149,"line_start":159,"line_end":159,"column_start":5,"column_end":13},"name":"ZMQ_NULL","qualname":"::Mechanism::ZMQ_NULL","value":"Mechanism::ZMQ_NULL","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":464},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5155,"byte_end":5164,"line_start":160,"line_end":160,"column_start":5,"column_end":14},"name":"ZMQ_PLAIN","qualname":"::Mechanism::ZMQ_PLAIN","value":"Mechanism::ZMQ_PLAIN","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":466},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5170,"byte_end":5179,"line_start":161,"line_end":161,"column_start":5,"column_end":14},"name":"ZMQ_CURVE","qualname":"::Mechanism::ZMQ_CURVE","value":"Mechanism::ZMQ_CURVE","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":468},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5185,"byte_end":5195,"line_start":162,"line_end":162,"column_start":5,"column_end":15},"name":"ZMQ_GSSAPI","qualname":"::Mechanism::ZMQ_GSSAPI","value":"Mechanism::ZMQ_GSSAPI","parent":{"krate":0,"index":461},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":461},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5097,"byte_end":5106,"line_start":157,"line_end":157,"column_start":10,"column_end":19},"name":"Mechanism","qualname":"::Mechanism","value":"pub enum Mechanism { ZMQ_NULL, ZMQ_PLAIN, ZMQ_CURVE, ZMQ_GSSAPI, }","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468}],"decl_id":null,"docs":" Security Mechanism\n","sig":null,"attributes":[{"value":"/ Security Mechanism","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":4993,"byte_end":5015,"line_start":154,"line_end":154,"column_start":1,"column_end":23}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5016,"byte_end":5046,"line_start":155,"line_end":155,"column_start":1,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":479},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5304,"byte_end":5310,"line_start":168,"line_end":168,"column_start":5,"column_end":11},"name":"EACCES","qualname":"::Error::EACCES","value":"Error::EACCES","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":481},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5316,"byte_end":5326,"line_start":169,"line_end":169,"column_start":5,"column_end":15},"name":"EADDRINUSE","qualname":"::Error::EADDRINUSE","value":"Error::EADDRINUSE","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":483},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5332,"byte_end":5338,"line_start":170,"line_end":170,"column_start":5,"column_end":11},"name":"EAGAIN","qualname":"::Error::EAGAIN","value":"Error::EAGAIN","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":485},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5344,"byte_end":5349,"line_start":171,"line_end":171,"column_start":5,"column_end":10},"name":"EBUSY","qualname":"::Error::EBUSY","value":"Error::EBUSY","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":487},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5355,"byte_end":5367,"line_start":172,"line_end":172,"column_start":5,"column_end":17},"name":"ECONNREFUSED","qualname":"::Error::ECONNREFUSED","value":"Error::ECONNREFUSED","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":489},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5373,"byte_end":5379,"line_start":173,"line_end":173,"column_start":5,"column_end":11},"name":"EFAULT","qualname":"::Error::EFAULT","value":"Error::EFAULT","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":491},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5385,"byte_end":5390,"line_start":174,"line_end":174,"column_start":5,"column_end":10},"name":"EINTR","qualname":"::Error::EINTR","value":"Error::EINTR","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":493},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5396,"byte_end":5408,"line_start":175,"line_end":175,"column_start":5,"column_end":17},"name":"EHOSTUNREACH","qualname":"::Error::EHOSTUNREACH","value":"Error::EHOSTUNREACH","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":495},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5414,"byte_end":5425,"line_start":176,"line_end":176,"column_start":5,"column_end":16},"name":"EINPROGRESS","qualname":"::Error::EINPROGRESS","value":"Error::EINPROGRESS","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":497},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5431,"byte_end":5437,"line_start":177,"line_end":177,"column_start":5,"column_end":11},"name":"EINVAL","qualname":"::Error::EINVAL","value":"Error::EINVAL","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":499},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5443,"byte_end":5449,"line_start":178,"line_end":178,"column_start":5,"column_end":11},"name":"EMFILE","qualname":"::Error::EMFILE","value":"Error::EMFILE","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":501},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5455,"byte_end":5463,"line_start":179,"line_end":179,"column_start":5,"column_end":13},"name":"EMSGSIZE","qualname":"::Error::EMSGSIZE","value":"Error::EMSGSIZE","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":503},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5469,"byte_end":5481,"line_start":180,"line_end":180,"column_start":5,"column_end":17},"name":"ENAMETOOLONG","qualname":"::Error::ENAMETOOLONG","value":"Error::ENAMETOOLONG","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":505},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5487,"byte_end":5493,"line_start":181,"line_end":181,"column_start":5,"column_end":11},"name":"ENODEV","qualname":"::Error::ENODEV","value":"Error::ENODEV","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":507},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5499,"byte_end":5505,"line_start":182,"line_end":182,"column_start":5,"column_end":11},"name":"ENOENT","qualname":"::Error::ENOENT","value":"Error::ENOENT","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":509},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5511,"byte_end":5517,"line_start":183,"line_end":183,"column_start":5,"column_end":11},"name":"ENOMEM","qualname":"::Error::ENOMEM","value":"Error::ENOMEM","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":511},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5523,"byte_end":5531,"line_start":184,"line_end":184,"column_start":5,"column_end":13},"name":"ENOTCONN","qualname":"::Error::ENOTCONN","value":"Error::ENOTCONN","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":513},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5537,"byte_end":5545,"line_start":185,"line_end":185,"column_start":5,"column_end":13},"name":"ENOTSOCK","qualname":"::Error::ENOTSOCK","value":"Error::ENOTSOCK","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":515},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5551,"byte_end":5557,"line_start":186,"line_end":186,"column_start":5,"column_end":11},"name":"EPROTO","qualname":"::Error::EPROTO","value":"Error::EPROTO","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":517},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5563,"byte_end":5578,"line_start":187,"line_end":187,"column_start":5,"column_end":20},"name":"EPROTONOSUPPORT","qualname":"::Error::EPROTONOSUPPORT","value":"Error::EPROTONOSUPPORT","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":519},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5584,"byte_end":5591,"line_start":188,"line_end":188,"column_start":5,"column_end":12},"name":"ENOTSUP","qualname":"::Error::ENOTSUP","value":"Error::ENOTSUP","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":521},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5597,"byte_end":5604,"line_start":189,"line_end":189,"column_start":5,"column_end":12},"name":"ENOBUFS","qualname":"::Error::ENOBUFS","value":"Error::ENOBUFS","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":523},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5610,"byte_end":5618,"line_start":190,"line_end":190,"column_start":5,"column_end":13},"name":"ENETDOWN","qualname":"::Error::ENETDOWN","value":"Error::ENETDOWN","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":525},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5624,"byte_end":5637,"line_start":191,"line_end":191,"column_start":5,"column_end":18},"name":"EADDRNOTAVAIL","qualname":"::Error::EADDRNOTAVAIL","value":"Error::EADDRNOTAVAIL","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":527},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5674,"byte_end":5678,"line_start":194,"line_end":194,"column_start":5,"column_end":9},"name":"EFSM","qualname":"::Error::EFSM","value":"Error::EFSM","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":529},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5684,"byte_end":5698,"line_start":195,"line_end":195,"column_start":5,"column_end":19},"name":"ENOCOMPATPROTO","qualname":"::Error::ENOCOMPATPROTO","value":"Error::ENOCOMPATPROTO","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":531},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5704,"byte_end":5709,"line_start":196,"line_end":196,"column_start":5,"column_end":10},"name":"ETERM","qualname":"::Error::ETERM","value":"Error::ETERM","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":533},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5715,"byte_end":5723,"line_start":197,"line_end":197,"column_start":5,"column_end":13},"name":"EMTHREAD","qualname":"::Error::EMTHREAD","value":"Error::EMTHREAD","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":478},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5292,"byte_end":5297,"line_start":167,"line_end":167,"column_start":10,"column_end":15},"name":"Error","qualname":"::Error","value":"pub enum Error {\n    EACCES,\n    EADDRINUSE,\n    EAGAIN,\n    EBUSY,\n    ECONNREFUSED,\n    EFAULT,\n    EINTR,\n    EHOSTUNREACH,\n    EINPROGRESS,\n    EINVAL,\n    EMFILE,\n    EMSGSIZE,\n    ENAMETOOLONG,\n    ENODEV,\n    ENOENT,\n    ENOMEM,\n    ENOTCONN,\n    ENOTSOCK,\n    EPROTO,\n    EPROTONOSUPPORT,\n    ENOTSUP,\n    ENOBUFS,\n    ENETDOWN,\n    EADDRNOTAVAIL,\n    EFSM,\n    ENOCOMPATPROTO,\n    ETERM,\n    EMTHREAD,\n}","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":481},{"krate":0,"index":483},{"krate":0,"index":485},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":505},{"krate":0,"index":507},{"krate":0,"index":509},{"krate":0,"index":511},{"krate":0,"index":513},{"krate":0,"index":515},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":521},{"krate":0,"index":523},{"krate":0,"index":525},{"krate":0,"index":527},{"krate":0,"index":529},{"krate":0,"index":531},{"krate":0,"index":533}],"decl_id":null,"docs":" An error returned by a 0MQ API function.\n","sig":null,"attributes":[{"value":"/ An error returned by a 0MQ API function.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5200,"byte_end":5244,"line_start":165,"line_end":165,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5752,"byte_end":5758,"line_start":201,"line_end":201,"column_start":12,"column_end":18},"name":"to_raw","qualname":"<Error>::to_raw","value":"pub fn to_raw(Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":7172,"byte_end":7180,"line_start":235,"line_end":235,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<Error>::from_raw","value":"pub fn from_raw(i32) -> Error","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":240},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":12344,"byte_end":12351,"line_start":368,"line_end":368,"column_start":8,"column_end":15},"name":"version","qualname":"::version","value":"pub fn version() -> (i32, i32, i32)","parent":null,"children":[],"decl_id":null,"docs":" Return the current zeromq version, as `(major, minor, patch)`.\n","sig":null,"attributes":[{"value":"/ Return the current zeromq version, as `(major, minor, patch)`.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":12270,"byte_end":12336,"line_start":367,"line_end":367,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":544},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13983,"byte_end":13990,"line_start":425,"line_end":425,"column_start":12,"column_end":19},"name":"Context","qualname":"::Context","value":"Context {  }","parent":null,"children":[{"krate":0,"index":545}],"decl_id":null,"docs":" Handle for a 0MQ context, used to create sockets.","sig":null,"attributes":[{"value":"/ Handle for a 0MQ context, used to create sockets.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13043,"byte_end":13096,"line_start":404,"line_end":404,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13097,"byte_end":13100,"line_start":405,"line_end":405,"column_start":1,"column_end":4}},{"value":"/ It is thread safe, and can be safely cloned and shared. Each clone","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13101,"byte_end":13171,"line_start":406,"line_end":406,"column_start":1,"column_end":71}},{"value":"/ references the same underlying C context. Internally, an `Arc` is","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13172,"byte_end":13241,"line_start":407,"line_end":407,"column_start":1,"column_end":70}},{"value":"/ used to implement this in a threadsafe way.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13242,"byte_end":13289,"line_start":408,"line_end":408,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13290,"byte_end":13293,"line_start":409,"line_end":409,"column_start":1,"column_end":4}},{"value":"/ Also note that this binding deviates from the C API in that each","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13294,"byte_end":13362,"line_start":410,"line_end":410,"column_start":1,"column_end":69}},{"value":"/ socket created from a context initially owns a clone of that","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13363,"byte_end":13427,"line_start":411,"line_end":411,"column_start":1,"column_end":65}},{"value":"/ context. This reference is kept to avoid a potential deadlock","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13428,"byte_end":13493,"line_start":412,"line_end":412,"column_start":1,"column_end":66}},{"value":"/ situation that would otherwise occur:","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13494,"byte_end":13535,"line_start":413,"line_end":413,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13536,"byte_end":13539,"line_start":414,"line_end":414,"column_start":1,"column_end":4}},{"value":"/ Destroying the underlying C context is an operation which","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13540,"byte_end":13601,"line_start":415,"line_end":415,"column_start":1,"column_end":62}},{"value":"/ blocks waiting for all sockets created from it to be closed","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13602,"byte_end":13665,"line_start":416,"line_end":416,"column_start":1,"column_end":64}},{"value":"/ first. If one of the sockets belongs to thread issuing the","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13666,"byte_end":13728,"line_start":417,"line_end":417,"column_start":1,"column_end":63}},{"value":"/ destroy operation, you have established a deadlock.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13729,"byte_end":13784,"line_start":418,"line_end":418,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13785,"byte_end":13788,"line_start":419,"line_end":419,"column_start":1,"column_end":4}},{"value":"/ You can still deadlock yourself (or intentionally close sockets in","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13789,"byte_end":13859,"line_start":420,"line_end":420,"column_start":1,"column_end":71}},{"value":"/ other threads, see `zmq_ctx_destroy`(3)) by explicitly calling","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13860,"byte_end":13926,"line_start":421,"line_end":421,"column_start":1,"column_end":67}},{"value":"/ `Context::destroy`.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13927,"byte_end":13950,"line_start":422,"line_end":422,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":13951,"byte_end":13954,"line_start":423,"line_end":423,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":14103,"byte_end":14106,"line_start":431,"line_end":431,"column_start":12,"column_end":15},"name":"new","qualname":"<Context>::new","value":"pub fn new() -> Context","parent":null,"children":[],"decl_id":null,"docs":" Create a new reference-counted context handle.\n","sig":null,"attributes":[{"value":"/ Create a new reference-counted context handle.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":14041,"byte_end":14091,"line_start":430,"line_end":430,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":14497,"byte_end":14503,"line_start":444,"line_end":444,"column_start":12,"column_end":18},"name":"socket","qualname":"<Context>::socket","value":"pub fn socket(&Self, SocketType) -> Result<Socket>","parent":null,"children":[],"decl_id":null,"docs":" Create a new socket.","sig":null,"attributes":[{"value":"/ Create a new socket.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":14272,"byte_end":14296,"line_start":439,"line_end":439,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":14301,"byte_end":14304,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ Note that the returned socket keeps a an `Arc` reference to","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":14309,"byte_end":14372,"line_start":441,"line_end":441,"column_start":5,"column_end":68}},{"value":"/ the context it was created from, and will keep that context","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":14377,"byte_end":14440,"line_start":442,"line_end":442,"column_start":5,"column_end":68}},{"value":"/ from being dropped while being live.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":14445,"byte_end":14485,"line_start":443,"line_end":443,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":14999,"byte_end":15006,"line_start":460,"line_end":460,"column_start":12,"column_end":19},"name":"destroy","qualname":"<Context>::destroy","value":"pub fn destroy(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Try to destroy the context. This is different than the destructor; the\n destructor will loop when zmq_ctx_term returns EINTR.\n","sig":null,"attributes":[{"value":"/ Try to destroy the context. This is different than the destructor; the","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":14851,"byte_end":14925,"line_start":458,"line_end":458,"column_start":5,"column_end":79}},{"value":"/ destructor will loop when zmq_ctx_term returns EINTR.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":14930,"byte_end":14987,"line_start":459,"line_end":459,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":255},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":15205,"byte_end":15211,"line_start":472,"line_end":472,"column_start":12,"column_end":18},"name":"Socket","qualname":"::Socket","value":"Socket {  }","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"decl_id":null,"docs":" A socket, the central object in 0MQ.\n","sig":null,"attributes":[{"value":"/ A socket, the central object in 0MQ.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":15153,"byte_end":15193,"line_start":471,"line_end":471,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":266},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18022,"byte_end":18030,"line_start":568,"line_end":568,"column_start":11,"column_end":19},"name":"Sendable","qualname":"::Sendable","value":"Sendable","parent":null,"children":[{"krate":0,"index":267}],"decl_id":null,"docs":" Sendable over a `Socket`.","sig":null,"attributes":[{"value":"/ Sendable over a `Socket`.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":17646,"byte_end":17675,"line_start":559,"line_end":559,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":17676,"byte_end":17679,"line_start":560,"line_end":560,"column_start":1,"column_end":4}},{"value":"/ A type can implement this trait there is an especially efficient","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":17680,"byte_end":17748,"line_start":561,"line_end":561,"column_start":1,"column_end":69}},{"value":"/ implementation for sending it as a message over a zmq socket.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":17749,"byte_end":17814,"line_start":562,"line_end":562,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":17815,"byte_end":17818,"line_start":563,"line_end":563,"column_start":1,"column_end":4}},{"value":"/ If the type needs to be directly passed to `Socket::send()`, but","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":17819,"byte_end":17887,"line_start":564,"line_end":564,"column_start":1,"column_end":69}},{"value":"/ the overhead of allocating a `Message` instance is not an issue,","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":17888,"byte_end":17956,"line_start":565,"line_end":565,"column_start":1,"column_end":69}},{"value":"/ `Into<Message>` should be implemented instead.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":17957,"byte_end":18007,"line_start":566,"line_end":566,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18008,"byte_end":18011,"line_start":567,"line_end":567,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18040,"byte_end":18044,"line_start":569,"line_end":569,"column_start":8,"column_end":12},"name":"send","qualname":"::Sendable::send","value":"pub fn send(Self, &Socket, i32) -> Result<()>","parent":{"krate":0,"index":266},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18670,"byte_end":18678,"line_start":589,"line_end":589,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<Socket>::into_raw","value":"pub fn into_raw(Self) -> *mut c_void","parent":null,"children":[],"decl_id":null,"docs":" Consume the Socket and return the raw socket pointer.","sig":null,"attributes":[{"value":"/ Consume the Socket and return the raw socket pointer.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18391,"byte_end":18448,"line_start":584,"line_end":584,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18453,"byte_end":18456,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ Failure to close the raw socket manually or call `from_raw`","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18461,"byte_end":18524,"line_start":586,"line_end":586,"column_start":5,"column_end":68}},{"value":"/ will lead to a memory leak. Also note that is function","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18529,"byte_end":18587,"line_start":587,"line_end":587,"column_start":5,"column_end":63}},{"value":"/ relinquishes the reference on the context is was created from.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18592,"byte_end":18658,"line_start":588,"line_end":588,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18994,"byte_end":19002,"line_start":598,"line_end":598,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Socket>::from_raw","value":"pub unsafe fn from_raw(*mut c_void) -> Socket","parent":null,"children":[],"decl_id":null,"docs":" Create a Socket from a raw socket pointer.","sig":null,"attributes":[{"value":"/ Create a Socket from a raw socket pointer.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18763,"byte_end":18809,"line_start":594,"line_end":594,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18814,"byte_end":18817,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ The Socket assumes ownership of the pointer and will close the socket","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18822,"byte_end":18895,"line_start":596,"line_end":596,"column_start":5,"column_end":78}},{"value":"/ when it is dropped. The returned socket will not reference any context.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18900,"byte_end":18975,"line_start":597,"line_end":597,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":19333,"byte_end":19343,"line_start":611,"line_end":611,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<Socket>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> *mut c_void","parent":null,"children":[],"decl_id":null,"docs":" Return the inner pointer to this Socket.","sig":null,"attributes":[{"value":"/ Return the inner pointer to this Socket.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":19142,"byte_end":19186,"line_start":606,"line_end":606,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":19191,"byte_end":19194,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ **WARNING**:","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":19199,"byte_end":19215,"line_start":608,"line_end":608,"column_start":5,"column_end":21}},{"value":"/ It is your responsibility to make sure that the underlying","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":19220,"byte_end":19282,"line_start":609,"line_end":609,"column_start":5,"column_end":67}},{"value":"/ memory is not freed too early.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":19287,"byte_end":19321,"line_start":610,"line_end":610,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":19448,"byte_end":19452,"line_start":616,"line_end":616,"column_start":12,"column_end":16},"name":"bind","qualname":"<Socket>::bind","value":"pub fn bind(&Self, &str) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Accept connections on a socket.\n","sig":null,"attributes":[{"value":"/ Accept connections on a socket.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":19401,"byte_end":19436,"line_start":615,"line_end":615,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":19695,"byte_end":19702,"line_start":623,"line_end":623,"column_start":12,"column_end":19},"name":"connect","qualname":"<Socket>::connect","value":"pub fn connect(&Self, &str) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Connect a socket.\n","sig":null,"attributes":[{"value":"/ Connect a socket.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":19662,"byte_end":19683,"line_start":622,"line_end":622,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":19971,"byte_end":19981,"line_start":630,"line_end":630,"column_start":12,"column_end":22},"name":"disconnect","qualname":"<Socket>::disconnect","value":"pub fn disconnect(&Self, &str) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Disconnect a previously connected socket\n","sig":null,"attributes":[{"value":"/ Disconnect a previously connected socket","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":19915,"byte_end":19959,"line_start":629,"line_end":629,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":20248,"byte_end":20255,"line_start":637,"line_end":637,"column_start":12,"column_end":19},"name":"monitor","qualname":"<Socket>::monitor","value":"pub fn monitor(&Self, &str, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Configure the socket for monitoring\n","sig":null,"attributes":[{"value":"/ Configure the socket for monitoring","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":20197,"byte_end":20236,"line_start":636,"line_end":636,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":20703,"byte_end":20707,"line_start":649,"line_end":649,"column_start":12,"column_end":16},"name":"send","qualname":"<Socket>::send","value":"pub fn send<T>(&Self, T, i32) -> Result<()> where T: Sendable","parent":null,"children":[],"decl_id":null,"docs":" Send a message.","sig":null,"attributes":[{"value":"/ Send a message.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":20541,"byte_end":20560,"line_start":645,"line_end":645,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":20565,"byte_end":20568,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ Due to the provided `From` implementations, this works for","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":20573,"byte_end":20635,"line_start":647,"line_end":647,"column_start":5,"column_end":67}},{"value":"/ `&[u8]`, `Vec<u8>` and `&str` `Message` itself.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":20640,"byte_end":20691,"line_start":648,"line_end":648,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":20937,"byte_end":20945,"line_start":658,"line_end":658,"column_start":12,"column_end":20},"name":"send_msg","qualname":"<Socket>::send_msg","value":"pub fn send_msg(&Self, Message, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a `Message` message.\n","sig":null,"attributes":[{"value":"/ Send a `Message` message.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":20832,"byte_end":20861,"line_start":656,"line_end":656,"column_start":5,"column_end":34}},{"value":"deprecated(since = \"0.9.0\", note = \"Use `send` instead\")","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":20866,"byte_end":20925,"line_start":657,"line_end":657,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":21107,"byte_end":21115,"line_start":663,"line_end":663,"column_start":12,"column_end":20},"name":"send_str","qualname":"<Socket>::send_str","value":"pub fn send_str(&Self, &str, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.9.0\", note = \"Use `send` instead\")","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":21036,"byte_end":21095,"line_start":662,"line_end":662,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":21212,"byte_end":21226,"line_start":667,"line_end":667,"column_start":12,"column_end":26},"name":"send_multipart","qualname":"<Socket>::send_multipart","value":"pub fn send_multipart<I, T>(&Self, I, i32) -> Result<()> where\nI: IntoIterator<Item = T>, T: Into<Message>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":21895,"byte_end":21899,"line_start":689,"line_end":689,"column_start":12,"column_end":16},"name":"recv","qualname":"<Socket>::recv","value":"pub fn recv(&Self, &mut Message, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Receive a message into a `Message`. The length passed to zmq_msg_recv\n is the length of the buffer.\n","sig":null,"attributes":[{"value":"/ Receive a message into a `Message`. The length passed to zmq_msg_recv","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":21773,"byte_end":21846,"line_start":687,"line_end":687,"column_start":5,"column_end":78}},{"value":"/ is the length of the buffer.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":21851,"byte_end":21883,"line_start":688,"line_end":688,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":22321,"byte_end":22330,"line_start":697,"line_end":697,"column_start":12,"column_end":21},"name":"recv_into","qualname":"<Socket>::recv_into","value":"pub fn recv_into(&Self, &mut [u8], i32) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Receive bytes into a slice. The length passed to `zmq_recv` is the length of the slice. The\n return value is the number of bytes in the message, which may be larger than the length of\n the slice, indicating truncation.\n","sig":null,"attributes":[{"value":"/ Receive bytes into a slice. The length passed to `zmq_recv` is the length of the slice. The","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":22073,"byte_end":22168,"line_start":694,"line_end":694,"column_start":5,"column_end":100}},{"value":"/ return value is the number of bytes in the message, which may be larger than the length of","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":22173,"byte_end":22267,"line_start":695,"line_end":695,"column_start":5,"column_end":99}},{"value":"/ the slice, indicating truncation.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":22272,"byte_end":22309,"line_start":696,"line_end":696,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":22666,"byte_end":22674,"line_start":706,"line_end":706,"column_start":12,"column_end":20},"name":"recv_msg","qualname":"<Socket>::recv_msg","value":"pub fn recv_msg(&Self, i32) -> Result<Message>","parent":null,"children":[],"decl_id":null,"docs":" Receive a message into a fresh `Message`.\n","sig":null,"attributes":[{"value":"/ Receive a message into a fresh `Message`.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":22609,"byte_end":22654,"line_start":705,"line_end":705,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":22863,"byte_end":22873,"line_start":712,"line_end":712,"column_start":12,"column_end":22},"name":"recv_bytes","qualname":"<Socket>::recv_bytes","value":"pub fn recv_bytes(&Self, i32) -> Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Receive a message as a byte vector.\n","sig":null,"attributes":[{"value":"/ Receive a message as a byte vector.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":22812,"byte_end":22851,"line_start":711,"line_end":711,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":23171,"byte_end":23182,"line_start":720,"line_end":720,"column_start":12,"column_end":23},"name":"recv_string","qualname":"<Socket>::recv_string","value":"pub fn recv_string(&Self, i32) -> Result<result::Result<String, Vec<u8>>>","parent":null,"children":[],"decl_id":null,"docs":" Receive a `String` from the socket.","sig":null,"attributes":[{"value":"/ Receive a `String` from the socket.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":22978,"byte_end":23017,"line_start":716,"line_end":716,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":23022,"byte_end":23025,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ If the received message is not valid UTF-8, it is returned as the original","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":23030,"byte_end":23108,"line_start":718,"line_end":718,"column_start":5,"column_end":83}},{"value":"/ Vec in the `Err` part of the inner result.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":23113,"byte_end":23159,"line_start":719,"line_end":719,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":23650,"byte_end":23664,"line_start":730,"line_end":730,"column_start":12,"column_end":26},"name":"recv_multipart","qualname":"<Socket>::recv_multipart","value":"pub fn recv_multipart(&Self, i32) -> Result<Vec<Vec<u8>>>","parent":null,"children":[],"decl_id":null,"docs":" Receive a multipart message from the socket.","sig":null,"attributes":[{"value":"/ Receive a multipart message from the socket.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":23375,"byte_end":23423,"line_start":725,"line_end":725,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":23428,"byte_end":23431,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ Note that this will allocate a new vector for each message part; for","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":23436,"byte_end":23508,"line_start":727,"line_end":727,"column_start":5,"column_end":77}},{"value":"/ many applications it will be possible to process the different parts","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":23513,"byte_end":23585,"line_start":728,"line_end":728,"column_start":5,"column_end":77}},{"value":"/ sequentially and reuse allocations that way.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":23590,"byte_end":23638,"line_start":729,"line_end":729,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24074,"byte_end":24081,"line_start":746,"line_end":746,"column_start":10,"column_end":17},"name":"is_ipv6","qualname":"<Socket>::is_ipv6","value":"pub fn is_ipv6(&Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for the `ZMQ_IPV6` option.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24083,"byte_end":24091,"line_start":746,"line_end":746,"column_start":19,"column_end":27},"name":"set_ipv6","qualname":"<Socket>::set_ipv6","value":"pub fn set_ipv6(&Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for the `ZMQ_IPV6` option.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24176,"byte_end":24188,"line_start":748,"line_end":748,"column_start":10,"column_end":22},"name":"is_immediate","qualname":"<Socket>::is_immediate","value":"pub fn is_immediate(&Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for the `ZMQ_IMMEDIATE` option.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24190,"byte_end":24203,"line_start":748,"line_end":748,"column_start":24,"column_end":37},"name":"set_immediate","qualname":"<Socket>::set_immediate","value":"pub fn set_immediate(&Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for the `ZMQ_IMMEDIATE` option.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24296,"byte_end":24311,"line_start":750,"line_end":750,"column_start":10,"column_end":25},"name":"is_plain_server","qualname":"<Socket>::is_plain_server","value":"pub fn is_plain_server(&Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for the `ZMQ_PLAIN_SERVER` option.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24313,"byte_end":24329,"line_start":750,"line_end":750,"column_start":27,"column_end":43},"name":"set_plain_server","qualname":"<Socket>::set_plain_server","value":"pub fn set_plain_server(&Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for the `ZMQ_PLAIN_SERVER` option.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24421,"byte_end":24432,"line_start":752,"line_end":752,"column_start":10,"column_end":21},"name":"is_conflate","qualname":"<Socket>::is_conflate","value":"pub fn is_conflate(&Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for the `ZMQ_CONFLATE` option.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24434,"byte_end":24446,"line_start":752,"line_end":752,"column_start":23,"column_end":35},"name":"set_conflate","qualname":"<Socket>::set_conflate","value":"pub fn set_conflate(&Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for the `ZMQ_CONFLATE` option.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24482,"byte_end":24497,"line_start":753,"line_end":753,"column_start":10,"column_end":25},"name":"is_probe_router","qualname":"<Socket>::is_probe_router","value":"pub fn is_probe_router(&Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24499,"byte_end":24515,"line_start":753,"line_end":753,"column_start":27,"column_end":43},"name":"set_probe_router","qualname":"<Socket>::set_probe_router","value":"pub fn set_probe_router(&Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24555,"byte_end":24574,"line_start":754,"line_end":754,"column_start":10,"column_end":29},"name":"is_router_mandatory","qualname":"<Socket>::is_router_mandatory","value":"pub fn is_router_mandatory(&Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24576,"byte_end":24596,"line_start":754,"line_end":754,"column_start":31,"column_end":51},"name":"set_router_mandatory","qualname":"<Socket>::set_router_mandatory","value":"pub fn set_router_mandatory(&Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24640,"byte_end":24658,"line_start":755,"line_end":755,"column_start":10,"column_end":28},"name":"is_router_handover","qualname":"<Socket>::is_router_handover","value":"pub fn is_router_handover(&Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24660,"byte_end":24679,"line_start":755,"line_end":755,"column_start":30,"column_end":49},"name":"set_router_handover","qualname":"<Socket>::set_router_handover","value":"pub fn set_router_handover(&Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24722,"byte_end":24737,"line_start":756,"line_end":756,"column_start":10,"column_end":25},"name":"is_curve_server","qualname":"<Socket>::is_curve_server","value":"pub fn is_curve_server(&Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24739,"byte_end":24755,"line_start":756,"line_end":756,"column_start":27,"column_end":43},"name":"set_curve_server","qualname":"<Socket>::set_curve_server","value":"pub fn set_curve_server(&Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24795,"byte_end":24811,"line_start":757,"line_end":757,"column_start":10,"column_end":26},"name":"is_gssapi_server","qualname":"<Socket>::is_gssapi_server","value":"pub fn is_gssapi_server(&Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24813,"byte_end":24830,"line_start":757,"line_end":757,"column_start":28,"column_end":45},"name":"set_gssapi_server","qualname":"<Socket>::set_gssapi_server","value":"pub fn set_gssapi_server(&Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24871,"byte_end":24890,"line_start":758,"line_end":758,"column_start":10,"column_end":29},"name":"is_gssapi_plaintext","qualname":"<Socket>::is_gssapi_plaintext","value":"pub fn is_gssapi_plaintext(&Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24892,"byte_end":24912,"line_start":758,"line_end":758,"column_start":31,"column_end":51},"name":"set_gssapi_plaintext","qualname":"<Socket>::set_gssapi_plaintext","value":"pub fn set_gssapi_plaintext(&Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":24959,"byte_end":24974,"line_start":759,"line_end":759,"column_start":13,"column_end":28},"name":"set_req_relaxed","qualname":"<Socket>::set_req_relaxed","value":"pub fn set_req_relaxed(&Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25016,"byte_end":25033,"line_start":760,"line_end":760,"column_start":13,"column_end":30},"name":"set_req_correlate","qualname":"<Socket>::set_req_correlate","value":"pub fn set_req_correlate(&Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25123,"byte_end":25138,"line_start":764,"line_end":764,"column_start":12,"column_end":27},"name":"get_socket_type","qualname":"<Socket>::get_socket_type","value":"pub fn get_socket_type(&Self) -> Result<SocketType>","parent":null,"children":[],"decl_id":null,"docs":" Return the type of this socket.\n","sig":null,"attributes":[{"value":"/ Return the type of this socket.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25076,"byte_end":25111,"line_start":763,"line_end":763,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25354,"byte_end":25365,"line_start":769,"line_end":769,"column_start":12,"column_end":23},"name":"get_rcvmore","qualname":"<Socket>::get_rcvmore","value":"pub fn get_rcvmore(&Self) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Return true if there are more frames of a multipart message to receive.\n","sig":null,"attributes":[{"value":"/ Return true if there are more frames of a multipart message to receive.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25267,"byte_end":25342,"line_start":768,"line_end":768,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25510,"byte_end":25524,"line_start":774,"line_end":774,"column_start":10,"column_end":24},"name":"get_maxmsgsize","qualname":"<Socket>::get_maxmsgsize","value":"pub fn get_maxmsgsize(&Self) -> Result<i64>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25526,"byte_end":25540,"line_start":774,"line_end":774,"column_start":26,"column_end":40},"name":"set_maxmsgsize","qualname":"<Socket>::set_maxmsgsize","value":"pub fn set_maxmsgsize(&Self, i64) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25577,"byte_end":25587,"line_start":775,"line_end":775,"column_start":10,"column_end":20},"name":"get_sndhwm","qualname":"<Socket>::get_sndhwm","value":"pub fn get_sndhwm(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25589,"byte_end":25599,"line_start":775,"line_end":775,"column_start":22,"column_end":32},"name":"set_sndhwm","qualname":"<Socket>::set_sndhwm","value":"pub fn set_sndhwm(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25632,"byte_end":25642,"line_start":776,"line_end":776,"column_start":10,"column_end":20},"name":"get_rcvhwm","qualname":"<Socket>::get_rcvhwm","value":"pub fn get_rcvhwm(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25644,"byte_end":25654,"line_start":776,"line_end":776,"column_start":22,"column_end":32},"name":"set_rcvhwm","qualname":"<Socket>::set_rcvhwm","value":"pub fn set_rcvhwm(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25687,"byte_end":25699,"line_start":777,"line_end":777,"column_start":10,"column_end":22},"name":"get_affinity","qualname":"<Socket>::get_affinity","value":"pub fn get_affinity(&Self) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25701,"byte_end":25713,"line_start":777,"line_end":777,"column_start":24,"column_end":36},"name":"set_affinity","qualname":"<Socket>::set_affinity","value":"pub fn set_affinity(&Self, u64) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25748,"byte_end":25756,"line_start":778,"line_end":778,"column_start":10,"column_end":18},"name":"get_rate","qualname":"<Socket>::get_rate","value":"pub fn get_rate(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25758,"byte_end":25766,"line_start":778,"line_end":778,"column_start":20,"column_end":28},"name":"set_rate","qualname":"<Socket>::set_rate","value":"pub fn set_rate(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25797,"byte_end":25813,"line_start":779,"line_end":779,"column_start":10,"column_end":26},"name":"get_recovery_ivl","qualname":"<Socket>::get_recovery_ivl","value":"pub fn get_recovery_ivl(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25815,"byte_end":25831,"line_start":779,"line_end":779,"column_start":28,"column_end":44},"name":"set_recovery_ivl","qualname":"<Socket>::set_recovery_ivl","value":"pub fn set_recovery_ivl(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25870,"byte_end":25880,"line_start":780,"line_end":780,"column_start":10,"column_end":20},"name":"get_sndbuf","qualname":"<Socket>::get_sndbuf","value":"pub fn get_sndbuf(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25882,"byte_end":25892,"line_start":780,"line_end":780,"column_start":22,"column_end":32},"name":"set_sndbuf","qualname":"<Socket>::set_sndbuf","value":"pub fn set_sndbuf(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25925,"byte_end":25935,"line_start":781,"line_end":781,"column_start":10,"column_end":20},"name":"get_rcvbuf","qualname":"<Socket>::get_rcvbuf","value":"pub fn get_rcvbuf(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25937,"byte_end":25947,"line_start":781,"line_end":781,"column_start":22,"column_end":32},"name":"set_rcvbuf","qualname":"<Socket>::set_rcvbuf","value":"pub fn set_rcvbuf(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25980,"byte_end":25987,"line_start":782,"line_end":782,"column_start":10,"column_end":17},"name":"get_tos","qualname":"<Socket>::get_tos","value":"pub fn get_tos(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":25989,"byte_end":25996,"line_start":782,"line_end":782,"column_start":19,"column_end":26},"name":"set_tos","qualname":"<Socket>::set_tos","value":"pub fn set_tos(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":26026,"byte_end":26036,"line_start":783,"line_end":783,"column_start":10,"column_end":20},"name":"get_linger","qualname":"<Socket>::get_linger","value":"pub fn get_linger(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":26038,"byte_end":26048,"line_start":783,"line_end":783,"column_start":22,"column_end":32},"name":"set_linger","qualname":"<Socket>::set_linger","value":"pub fn set_linger(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":26081,"byte_end":26098,"line_start":784,"line_end":784,"column_start":10,"column_end":27},"name":"get_reconnect_ivl","qualname":"<Socket>::get_reconnect_ivl","value":"pub fn get_reconnect_ivl(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":26100,"byte_end":26117,"line_start":784,"line_end":784,"column_start":29,"column_end":46},"name":"set_reconnect_ivl","qualname":"<Socket>::set_reconnect_ivl","value":"pub fn set_reconnect_ivl(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":26157,"byte_end":26178,"line_start":785,"line_end":785,"column_start":10,"column_end":31},"name":"get_reconnect_ivl_max","qualname":"<Socket>::get_reconnect_ivl_max","value":"pub fn get_reconnect_ivl_max(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":26180,"byte_end":26201,"line_start":785,"line_end":785,"column_start":33,"column_end":54},"name":"set_reconnect_ivl_max","qualname":"<Socket>::set_reconnect_ivl_max","value":"pub fn set_reconnect_ivl_max(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":26245,"byte_end":26256,"line_start":786,"line_end":786,"column_start":10,"column_end":21},"name":"get_backlog","qualname":"<Socket>::get_backlog","value":"pub fn get_backlog(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":26258,"byte_end":26269,"line_start":786,"line_end":786,"column_start":23,"column_end":34},"name":"set_backlog","qualname":"<Socket>::set_backlog","value":"pub fn set_backlog(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":26797,"byte_end":26803,"line_start":798,"line_end":798,"column_start":10,"column_end":16},"name":"get_fd","qualname":"<Socket>::get_fd","value":"pub fn get_fd(&Self) -> Result<RawFd>","parent":null,"children":[],"decl_id":null,"docs":" Get the event notification file descriptor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":27814,"byte_end":27824,"line_start":827,"line_end":827,"column_start":10,"column_end":20},"name":"get_events","qualname":"<Socket>::get_events","value":"pub fn get_events(&Self) -> Result<PollEvents>","parent":null,"children":[],"decl_id":null,"docs":" Get the currently pending events.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":27865,"byte_end":27883,"line_start":829,"line_end":829,"column_start":10,"column_end":28},"name":"get_multicast_hops","qualname":"<Socket>::get_multicast_hops","value":"pub fn get_multicast_hops(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":27885,"byte_end":27903,"line_start":829,"line_end":829,"column_start":30,"column_end":48},"name":"set_multicast_hops","qualname":"<Socket>::set_multicast_hops","value":"pub fn set_multicast_hops(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":27944,"byte_end":27956,"line_start":830,"line_end":830,"column_start":10,"column_end":22},"name":"get_rcvtimeo","qualname":"<Socket>::get_rcvtimeo","value":"pub fn get_rcvtimeo(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":27958,"byte_end":27970,"line_start":830,"line_end":830,"column_start":24,"column_end":36},"name":"set_rcvtimeo","qualname":"<Socket>::set_rcvtimeo","value":"pub fn set_rcvtimeo(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28005,"byte_end":28017,"line_start":831,"line_end":831,"column_start":10,"column_end":22},"name":"get_sndtimeo","qualname":"<Socket>::get_sndtimeo","value":"pub fn get_sndtimeo(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28019,"byte_end":28031,"line_start":831,"line_end":831,"column_start":24,"column_end":36},"name":"set_sndtimeo","qualname":"<Socket>::set_sndtimeo","value":"pub fn set_sndtimeo(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28066,"byte_end":28083,"line_start":832,"line_end":832,"column_start":10,"column_end":27},"name":"get_tcp_keepalive","qualname":"<Socket>::get_tcp_keepalive","value":"pub fn get_tcp_keepalive(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28085,"byte_end":28102,"line_start":832,"line_end":832,"column_start":29,"column_end":46},"name":"set_tcp_keepalive","qualname":"<Socket>::set_tcp_keepalive","value":"pub fn set_tcp_keepalive(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28142,"byte_end":28163,"line_start":833,"line_end":833,"column_start":10,"column_end":31},"name":"get_tcp_keepalive_cnt","qualname":"<Socket>::get_tcp_keepalive_cnt","value":"pub fn get_tcp_keepalive_cnt(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28165,"byte_end":28186,"line_start":833,"line_end":833,"column_start":33,"column_end":54},"name":"set_tcp_keepalive_cnt","qualname":"<Socket>::set_tcp_keepalive_cnt","value":"pub fn set_tcp_keepalive_cnt(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28230,"byte_end":28252,"line_start":834,"line_end":834,"column_start":10,"column_end":32},"name":"get_tcp_keepalive_idle","qualname":"<Socket>::get_tcp_keepalive_idle","value":"pub fn get_tcp_keepalive_idle(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28254,"byte_end":28276,"line_start":834,"line_end":834,"column_start":34,"column_end":56},"name":"set_tcp_keepalive_idle","qualname":"<Socket>::set_tcp_keepalive_idle","value":"pub fn set_tcp_keepalive_idle(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28321,"byte_end":28344,"line_start":835,"line_end":835,"column_start":10,"column_end":33},"name":"get_tcp_keepalive_intvl","qualname":"<Socket>::get_tcp_keepalive_intvl","value":"pub fn get_tcp_keepalive_intvl(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28346,"byte_end":28369,"line_start":835,"line_end":835,"column_start":35,"column_end":58},"name":"set_tcp_keepalive_intvl","qualname":"<Socket>::set_tcp_keepalive_intvl","value":"pub fn set_tcp_keepalive_intvl(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28415,"byte_end":28432,"line_start":836,"line_end":836,"column_start":10,"column_end":27},"name":"get_handshake_ivl","qualname":"<Socket>::get_handshake_ivl","value":"pub fn get_handshake_ivl(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28434,"byte_end":28451,"line_start":836,"line_end":836,"column_start":29,"column_end":46},"name":"set_handshake_ivl","qualname":"<Socket>::set_handshake_ivl","value":"pub fn set_handshake_ivl(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28558,"byte_end":28570,"line_start":838,"line_end":838,"column_start":13,"column_end":25},"name":"set_identity","qualname":"<Socket>::set_identity","value":"pub fn set_identity(&Self, &[u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28612,"byte_end":28625,"line_start":839,"line_end":839,"column_start":13,"column_end":26},"name":"set_subscribe","qualname":"<Socket>::set_subscribe","value":"pub fn set_subscribe(&Self, &[u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28666,"byte_end":28681,"line_start":840,"line_end":840,"column_start":13,"column_end":28},"name":"set_unsubscribe","qualname":"<Socket>::set_unsubscribe","value":"pub fn set_unsubscribe(&Self, &[u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28721,"byte_end":28738,"line_start":841,"line_end":841,"column_start":10,"column_end":27},"name":"get_heartbeat_ivl","qualname":"<Socket>::get_heartbeat_ivl","value":"pub fn get_heartbeat_ivl(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28740,"byte_end":28757,"line_start":841,"line_end":841,"column_start":29,"column_end":46},"name":"set_heartbeat_ivl","qualname":"<Socket>::set_heartbeat_ivl","value":"pub fn set_heartbeat_ivl(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28797,"byte_end":28814,"line_start":842,"line_end":842,"column_start":10,"column_end":27},"name":"get_heartbeat_ttl","qualname":"<Socket>::get_heartbeat_ttl","value":"pub fn get_heartbeat_ttl(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28816,"byte_end":28833,"line_start":842,"line_end":842,"column_start":29,"column_end":46},"name":"set_heartbeat_ttl","qualname":"<Socket>::set_heartbeat_ttl","value":"pub fn set_heartbeat_ttl(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28873,"byte_end":28894,"line_start":843,"line_end":843,"column_start":10,"column_end":31},"name":"get_heartbeat_timeout","qualname":"<Socket>::get_heartbeat_timeout","value":"pub fn get_heartbeat_timeout(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28896,"byte_end":28917,"line_start":843,"line_end":843,"column_start":33,"column_end":54},"name":"set_heartbeat_timeout","qualname":"<Socket>::set_heartbeat_timeout","value":"pub fn set_heartbeat_timeout(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28961,"byte_end":28980,"line_start":844,"line_end":844,"column_start":10,"column_end":29},"name":"get_connect_timeout","qualname":"<Socket>::get_connect_timeout","value":"pub fn get_connect_timeout(&Self) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":28982,"byte_end":29001,"line_start":844,"line_end":844,"column_start":31,"column_end":50},"name":"set_connect_timeout","qualname":"<Socket>::set_connect_timeout","value":"pub fn set_connect_timeout(&Self, i32) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":29112,"byte_end":29124,"line_start":848,"line_end":848,"column_start":12,"column_end":24},"name":"get_identity","qualname":"<Socket>::get_identity","value":"pub fn get_identity(&Self) -> Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":29285,"byte_end":29300,"line_start":853,"line_end":853,"column_start":12,"column_end":27},"name":"get_socks_proxy","qualname":"<Socket>::get_socks_proxy","value":"pub fn get_socks_proxy(&Self) -> Result<result::Result<String, Vec<u8>>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":29558,"byte_end":29571,"line_start":859,"line_end":859,"column_start":12,"column_end":25},"name":"get_mechanism","qualname":"<Socket>::get_mechanism","value":"pub fn get_mechanism(&Self) -> Result<Mechanism>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":29999,"byte_end":30017,"line_start":869,"line_end":869,"column_start":12,"column_end":30},"name":"get_plain_username","qualname":"<Socket>::get_plain_username","value":"pub fn get_plain_username(&Self) -> Result<result::Result<String, Vec<u8>>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":30208,"byte_end":30226,"line_start":874,"line_end":874,"column_start":12,"column_end":30},"name":"get_plain_password","qualname":"<Socket>::get_plain_password","value":"pub fn get_plain_password(&Self) -> Result<result::Result<String, Vec<u8>>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":30446,"byte_end":30460,"line_start":879,"line_end":879,"column_start":12,"column_end":26},"name":"get_zap_domain","qualname":"<Socket>::get_zap_domain","value":"pub fn get_zap_domain(&Self) -> Result<result::Result<String, Vec<u8>>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":31098,"byte_end":31115,"line_start":892,"line_end":892,"column_start":12,"column_end":29},"name":"get_last_endpoint","qualname":"<Socket>::get_last_endpoint","value":"pub fn get_last_endpoint(&Self) -> Result<result::Result<String, Vec<u8>>>","parent":null,"children":[],"decl_id":null,"docs":" Return the address of the last endpoint this socket was bound to.","sig":null,"attributes":[{"value":"/ Return the address of the last endpoint this socket was bound to.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":30640,"byte_end":30709,"line_start":884,"line_end":884,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":30714,"byte_end":30717,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ Note that the returned address is not guaranteed to be the","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":30722,"byte_end":30784,"line_start":886,"line_end":886,"column_start":5,"column_end":67}},{"value":"/ same as the one used with `bind`, and might also not be","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":30789,"byte_end":30848,"line_start":887,"line_end":887,"column_start":5,"column_end":64}},{"value":"/ directly usable with `connect`. In particular, when `bind` is","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":30853,"byte_end":30918,"line_start":888,"line_end":888,"column_start":5,"column_end":70}},{"value":"/ used with the wildcard address (`\"*\"`), in the address","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":30923,"byte_end":30981,"line_start":889,"line_end":889,"column_start":5,"column_end":63}},{"value":"/ returned, the wildcard will be expanded into the any address","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":30986,"byte_end":31050,"line_start":890,"line_end":890,"column_start":5,"column_end":69}},{"value":"/ (i.e. `0.0.0.0` with IPv4).","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":31055,"byte_end":31086,"line_start":891,"line_end":891,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":31654,"byte_end":31673,"line_start":907,"line_end":907,"column_start":12,"column_end":31},"name":"get_curve_publickey","qualname":"<Socket>::get_curve_publickey","value":"pub fn get_curve_publickey(&Self) -> Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Set the `ZMQ_CURVE_PUBLICKEY` option value.","sig":null,"attributes":[{"value":"/ Set the `ZMQ_CURVE_PUBLICKEY` option value.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":31433,"byte_end":31480,"line_start":902,"line_end":902,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":31485,"byte_end":31488,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ The key is returned as raw bytes. Use `z85_encode` on the","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":31493,"byte_end":31554,"line_start":904,"line_end":904,"column_start":5,"column_end":66}},{"value":"/ resulting data to get the Z85-encoded string representation of","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":31559,"byte_end":31625,"line_start":905,"line_end":905,"column_start":5,"column_end":71}},{"value":"/ the key.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":31630,"byte_end":31642,"line_start":906,"line_end":906,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":32015,"byte_end":32034,"line_start":916,"line_end":916,"column_start":12,"column_end":31},"name":"get_curve_secretkey","qualname":"<Socket>::get_curve_secretkey","value":"pub fn get_curve_secretkey(&Self) -> Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get the `ZMQ_CURVE_SECRETKEY` option value.","sig":null,"attributes":[{"value":"/ Get the `ZMQ_CURVE_SECRETKEY` option value.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":31794,"byte_end":31841,"line_start":911,"line_end":911,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":31846,"byte_end":31849,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ The key is returned as raw bytes. Use `z85_encode` on the","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":31854,"byte_end":31915,"line_start":913,"line_end":913,"column_start":5,"column_end":66}},{"value":"/ resulting data to get the Z85-encoded string representation of","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":31920,"byte_end":31986,"line_start":914,"line_end":914,"column_start":5,"column_end":71}},{"value":"/ the key.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":31991,"byte_end":32003,"line_start":915,"line_end":915,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":32379,"byte_end":32398,"line_start":925,"line_end":925,"column_start":12,"column_end":31},"name":"get_curve_serverkey","qualname":"<Socket>::get_curve_serverkey","value":"pub fn get_curve_serverkey(&Self) -> Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get `ZMQ_CURVE_SERVERKEY` option value.","sig":null,"attributes":[{"value":"/ Get `ZMQ_CURVE_SERVERKEY` option value.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":32155,"byte_end":32198,"line_start":920,"line_end":920,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":32203,"byte_end":32206,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ Note that the key is returned as raw bytes, as a 32-byte","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":32211,"byte_end":32271,"line_start":922,"line_end":922,"column_start":5,"column_end":65}},{"value":"/ vector. Use `z85_encode()` explicitly to obtain the","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":32276,"byte_end":32331,"line_start":923,"line_end":923,"column_start":5,"column_end":60}},{"value":"/ Z85-encoded string variant.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":32336,"byte_end":32367,"line_start":924,"line_end":924,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":32580,"byte_end":32600,"line_start":930,"line_end":930,"column_start":12,"column_end":32},"name":"get_gssapi_principal","qualname":"<Socket>::get_gssapi_principal","value":"pub fn get_gssapi_principal(&Self) -> Result<result::Result<String, Vec<u8>>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":32818,"byte_end":32846,"line_start":935,"line_end":935,"column_start":12,"column_end":40},"name":"get_gssapi_service_principal","qualname":"<Socket>::get_gssapi_service_principal","value":"pub fn get_gssapi_service_principal(&Self)\n-> Result<result::Result<String, Vec<u8>>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":33148,"byte_end":33163,"line_start":946,"line_end":946,"column_start":13,"column_end":28},"name":"set_socks_proxy","qualname":"<Socket>::set_socks_proxy","value":"pub fn set_socks_proxy(&Self, Option<&str>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":33213,"byte_end":33231,"line_start":947,"line_end":947,"column_start":13,"column_end":31},"name":"set_plain_username","qualname":"<Socket>::set_plain_username","value":"pub fn set_plain_username(&Self, Option<&str>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":33284,"byte_end":33302,"line_start":948,"line_end":948,"column_start":13,"column_end":31},"name":"set_plain_password","qualname":"<Socket>::set_plain_password","value":"pub fn set_plain_password(&Self, Option<&str>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":33355,"byte_end":33369,"line_start":949,"line_end":949,"column_start":13,"column_end":27},"name":"set_zap_domain","qualname":"<Socket>::set_zap_domain","value":"pub fn set_zap_domain(&Self, &str) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":33410,"byte_end":33430,"line_start":950,"line_end":950,"column_start":13,"column_end":33},"name":"set_xpub_welcome_msg","qualname":"<Socket>::set_xpub_welcome_msg","value":"pub fn set_xpub_welcome_msg(&Self, Option<&str>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":33485,"byte_end":33501,"line_start":951,"line_end":951,"column_start":13,"column_end":29},"name":"set_xpub_verbose","qualname":"<Socket>::set_xpub_verbose","value":"pub fn set_xpub_verbose(&Self, bool) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":33545,"byte_end":33564,"line_start":953,"line_end":953,"column_start":13,"column_end":32},"name":"set_curve_publickey","qualname":"<Socket>::set_curve_publickey","value":"pub fn set_curve_publickey(&Self, &[u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":33611,"byte_end":33630,"line_start":954,"line_end":954,"column_start":13,"column_end":32},"name":"set_curve_secretkey","qualname":"<Socket>::set_curve_secretkey","value":"pub fn set_curve_secretkey(&Self, &[u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":33677,"byte_end":33696,"line_start":955,"line_end":955,"column_start":13,"column_end":32},"name":"set_curve_serverkey","qualname":"<Socket>::set_curve_serverkey","value":"pub fn set_curve_serverkey(&Self, &[u8]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":33743,"byte_end":33763,"line_start":956,"line_end":956,"column_start":13,"column_end":33},"name":"set_gssapi_principal","qualname":"<Socket>::set_gssapi_principal","value":"pub fn set_gssapi_principal(&Self, &str) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":33810,"byte_end":33838,"line_start":957,"line_end":957,"column_start":13,"column_end":41},"name":"set_gssapi_service_principal","qualname":"<Socket>::set_gssapi_service_principal","value":"pub fn set_gssapi_service_principal(&Self, &str) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":33944,"byte_end":33956,"line_start":961,"line_end":961,"column_start":12,"column_end":24},"name":"as_poll_item","qualname":"<Socket>::as_poll_item","value":"pub fn as_poll_item(&Self, PollEvents) -> PollItem","parent":null,"children":[],"decl_id":null,"docs":" Create a `PollItem` from the socket.\n","sig":null,"attributes":[{"value":"/ Create a `PollItem` from the socket.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":33892,"byte_end":33932,"line_start":960,"line_end":960,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":34359,"byte_end":34363,"line_start":975,"line_end":975,"column_start":12,"column_end":16},"name":"poll","qualname":"<Socket>::poll","value":"pub fn poll(&Self, PollEvents, i64) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":" Do a call to `zmq_poll` with only this socket.","sig":null,"attributes":[{"value":"/ Do a call to `zmq_poll` with only this socket.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":34180,"byte_end":34230,"line_start":971,"line_end":971,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":34235,"byte_end":34238,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/ The return value on success will be either zero (no event) or one (some","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":34243,"byte_end":34318,"line_start":973,"line_end":973,"column_start":5,"column_end":80}},{"value":"/ event was signaled).","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":34323,"byte_end":34347,"line_start":974,"line_end":974,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":636},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":34668,"byte_end":34678,"line_start":984,"line_end":984,"column_start":16,"column_end":26},"name":"PollEvents","qualname":"::PollEvents","value":"PollEvents {  }","parent":null,"children":[{"krate":0,"index":637}],"decl_id":null,"docs":" Type representing pending socket events.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":671},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":34810,"byte_end":34816,"line_start":987,"line_end":987,"column_start":15,"column_end":21},"name":"POLLIN","qualname":"::PollEvents::POLLIN","value":"Self","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":" For `poll()`, specifies to signal when a message/some data\n can be read from a socket.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":672},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":34972,"byte_end":34979,"line_start":990,"line_end":990,"column_start":15,"column_end":22},"name":"POLLOUT","qualname":"::PollEvents::POLLOUT","value":"Self","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":" For `poll()`, specifies to signal when a message/some data\n can be written to a socket.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":673},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35182,"byte_end":35189,"line_start":994,"line_end":994,"column_start":15,"column_end":22},"name":"POLLERR","qualname":"::PollEvents::POLLERR","value":"Self","parent":{"krate":0,"index":670},"children":[],"decl_id":null,"docs":" For `poll()`, specifies to signal when an error condition\n is present on a socket.  This only applies to non-0MQ\n sockets.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":313},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35334,"byte_end":35340,"line_start":1000,"line_end":1000,"column_start":11,"column_end":17},"name":"POLLIN","qualname":"::POLLIN","value":"PollEvents","parent":null,"children":[],"decl_id":null,"docs":" For `poll()`, specifies to signal when a message/some data can be\n read from a socket.\n","sig":null,"attributes":[{"value":"/ For `poll()`, specifies to signal when a message/some data can be","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35230,"byte_end":35299,"line_start":998,"line_end":998,"column_start":1,"column_end":70}},{"value":"/ read from a socket.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35300,"byte_end":35323,"line_start":999,"line_end":999,"column_start":1,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":314},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35481,"byte_end":35488,"line_start":1004,"line_end":1004,"column_start":11,"column_end":18},"name":"POLLOUT","qualname":"::POLLOUT","value":"PollEvents","parent":null,"children":[],"decl_id":null,"docs":" For `poll()`, specifies to signal when a message/some data can be\n written to a socket.\n","sig":null,"attributes":[{"value":"/ For `poll()`, specifies to signal when a message/some data can be","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35376,"byte_end":35445,"line_start":1002,"line_end":1002,"column_start":1,"column_end":70}},{"value":"/ written to a socket.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35446,"byte_end":35470,"line_start":1003,"line_end":1003,"column_start":1,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":315},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35664,"byte_end":35671,"line_start":1008,"line_end":1008,"column_start":11,"column_end":18},"name":"POLLERR","qualname":"::POLLERR","value":"PollEvents","parent":null,"children":[],"decl_id":null,"docs":" For `poll()`, specifies to signal when an error condition is\n present on a socket.  This only applies to non-0MQ sockets.\n","sig":null,"attributes":[{"value":"/ For `poll()`, specifies to signal when an error condition is","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35525,"byte_end":35589,"line_start":1006,"line_end":1006,"column_start":1,"column_end":65}},{"value":"/ present on a socket.  This only applies to non-0MQ sockets.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35590,"byte_end":35653,"line_start":1007,"line_end":1007,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":316},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35979,"byte_end":35987,"line_start":1016,"line_end":1016,"column_start":12,"column_end":20},"name":"PollItem","qualname":"::PollItem","value":"PollItem {  }","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322}],"decl_id":null,"docs":" Represents a handle that can be `poll()`ed.","sig":null,"attributes":[{"value":"/ Represents a handle that can be `poll()`ed.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35708,"byte_end":35755,"line_start":1010,"line_end":1010,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35756,"byte_end":35759,"line_start":1011,"line_end":1011,"column_start":1,"column_end":4}},{"value":"/ This is either a reference to a 0MQ socket, or a standard socket.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35760,"byte_end":35829,"line_start":1012,"line_end":1012,"column_start":1,"column_end":70}},{"value":"/ Apart from that it contains the requested event mask, and is updated","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35830,"byte_end":35902,"line_start":1013,"line_end":1013,"column_start":1,"column_end":73}},{"value":"/ with the occurred events after `poll()` finishes.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35903,"byte_end":35956,"line_start":1014,"line_end":1014,"column_start":1,"column_end":54}},{"value":"repr(C)","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":35957,"byte_end":35967,"line_start":1015,"line_end":1015,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":36279,"byte_end":36286,"line_start":1027,"line_end":1027,"column_start":12,"column_end":19},"name":"from_fd","qualname":"<PollItem>::from_fd","value":"pub fn from_fd(RawFd, PollEvents) -> PollItem","parent":null,"children":[],"decl_id":null,"docs":" Construct a PollItem from a non-0MQ socket, given by its file\n descriptor and the events that should be polled.\n","sig":null,"attributes":[{"value":"/ Construct a PollItem from a non-0MQ socket, given by its file","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":36145,"byte_end":36210,"line_start":1025,"line_end":1025,"column_start":5,"column_end":70}},{"value":"/ descriptor and the events that should be polled.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":36215,"byte_end":36267,"line_start":1026,"line_end":1026,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":36567,"byte_end":36577,"line_start":1038,"line_end":1038,"column_start":12,"column_end":22},"name":"set_events","qualname":"<PollItem>::set_events","value":"pub fn set_events(&mut Self, PollEvents)","parent":null,"children":[],"decl_id":null,"docs":" Change the events to wait for.\n","sig":null,"attributes":[{"value":"/ Change the events to wait for.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":36521,"byte_end":36555,"line_start":1037,"line_end":1037,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":36725,"byte_end":36736,"line_start":1043,"line_end":1043,"column_start":12,"column_end":23},"name":"get_revents","qualname":"<PollItem>::get_revents","value":"pub fn get_revents(&Self) -> PollEvents","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the events that occurred for this handle.\n","sig":null,"attributes":[{"value":"/ Retrieve the events that occurred for this handle.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":36659,"byte_end":36713,"line_start":1042,"line_end":1042,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":36904,"byte_end":36915,"line_start":1048,"line_end":1048,"column_start":12,"column_end":23},"name":"is_readable","qualname":"<PollItem>::is_readable","value":"pub fn is_readable(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the polled socket has messages ready to receive.\n","sig":null,"attributes":[{"value":"/ Returns true if the polled socket has messages ready to receive.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":36824,"byte_end":36892,"line_start":1047,"line_end":1047,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":37094,"byte_end":37105,"line_start":1054,"line_end":1054,"column_start":12,"column_end":23},"name":"is_writable","qualname":"<PollItem>::is_writable","value":"pub fn is_writable(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the polled socket can accept messages to be sent\n without blocking.\n","sig":null,"attributes":[{"value":"/ Returns true if the polled socket can accept messages to be sent","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":36988,"byte_end":37056,"line_start":1052,"line_end":1052,"column_start":5,"column_end":73}},{"value":"/ without blocking.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":37061,"byte_end":37082,"line_start":1053,"line_end":1053,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":37260,"byte_end":37268,"line_start":1059,"line_end":1059,"column_start":12,"column_end":20},"name":"is_error","qualname":"<PollItem>::is_error","value":"pub fn is_error(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the polled socket encountered an error condition.\n","sig":null,"attributes":[{"value":"/ Returns true if the polled socket encountered an error condition.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":37179,"byte_end":37248,"line_start":1058,"line_end":1058,"column_start":5,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":331},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":37852,"byte_end":37856,"line_start":1075,"line_end":1075,"column_start":8,"column_end":12},"name":"poll","qualname":"::poll","value":"pub fn poll(&mut [PollItem], i64) -> Result<i32>","parent":null,"children":[],"decl_id":null,"docs":" Poll for events on multiple sockets.","sig":null,"attributes":[{"value":"/ Poll for events on multiple sockets.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":37340,"byte_end":37380,"line_start":1064,"line_end":1064,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":37381,"byte_end":37384,"line_start":1065,"line_end":1065,"column_start":1,"column_end":4}},{"value":"/ For every poll item given, the events given in the `events` bitmask are","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":37385,"byte_end":37460,"line_start":1066,"line_end":1066,"column_start":1,"column_end":76}},{"value":"/ monitored, and signaled in `revents` when they occur. Any number of poll","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":37461,"byte_end":37537,"line_start":1067,"line_end":1067,"column_start":1,"column_end":77}},{"value":"/ items can have events signaled when the function returns.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":37538,"byte_end":37599,"line_start":1068,"line_end":1068,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":37600,"byte_end":37603,"line_start":1069,"line_end":1069,"column_start":1,"column_end":4}},{"value":"/ The given timeout is in milliseconds and can be zero. A timeout of `-1`","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":37604,"byte_end":37679,"line_start":1070,"line_end":1070,"column_start":1,"column_end":76}},{"value":"/ indicates to block indefinitely until an event has occurred.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":37680,"byte_end":37744,"line_start":1071,"line_end":1071,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":37745,"byte_end":37748,"line_start":1072,"line_end":1072,"column_start":1,"column_end":4}},{"value":"/ The result, if not `Err`, indicates the number of poll items that have","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":37749,"byte_end":37823,"line_start":1073,"line_end":1073,"column_start":1,"column_end":75}},{"value":"/ events signaled.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":37824,"byte_end":37844,"line_start":1074,"line_end":1074,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":332},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":38427,"byte_end":38432,"line_start":1093,"line_end":1093,"column_start":8,"column_end":13},"name":"proxy","qualname":"::proxy","value":"pub fn proxy(&Socket, &Socket) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Start a 0MQ proxy in the current thread.","sig":null,"attributes":[{"value":"/ Start a 0MQ proxy in the current thread.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":38138,"byte_end":38182,"line_start":1086,"line_end":1086,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":38183,"byte_end":38186,"line_start":1087,"line_end":1087,"column_start":1,"column_end":4}},{"value":"/ A proxy connects a frontend socket with a backend socket, where the exact","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":38187,"byte_end":38264,"line_start":1088,"line_end":1088,"column_start":1,"column_end":78}},{"value":"/ behavior depends on the type of both sockets.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":38265,"byte_end":38314,"line_start":1089,"line_end":1089,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":38315,"byte_end":38318,"line_start":1090,"line_end":1090,"column_start":1,"column_end":4}},{"value":"/ This function only returns (always with an `Err`) when the sockets' context","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":38319,"byte_end":38398,"line_start":1091,"line_end":1091,"column_start":1,"column_end":80}},{"value":"/ has been closed.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":38399,"byte_end":38419,"line_start":1092,"line_end":1092,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":333},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":38764,"byte_end":38782,"line_start":1102,"line_end":1102,"column_start":8,"column_end":26},"name":"proxy_with_capture","qualname":"::proxy_with_capture","value":"pub fn proxy_with_capture(&mut Socket, &mut Socket, &mut Socket) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Start a 0MQ proxy in the current thread, with a capture socket.","sig":null,"attributes":[{"value":"/ Start a 0MQ proxy in the current thread, with a capture socket.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":38591,"byte_end":38658,"line_start":1098,"line_end":1098,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":38659,"byte_end":38662,"line_start":1099,"line_end":1099,"column_start":1,"column_end":4}},{"value":"/ The capture socket is sent all messages received on the frontend and backend","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":38663,"byte_end":38743,"line_start":1100,"line_end":1100,"column_start":1,"column_end":81}},{"value":"/ sockets.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":38744,"byte_end":38756,"line_start":1101,"line_end":1101,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":334},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":39296,"byte_end":39311,"line_start":1116,"line_end":1116,"column_start":8,"column_end":23},"name":"proxy_steerable","qualname":"::proxy_steerable","value":"pub fn proxy_steerable(&mut Socket, &mut Socket, &mut Socket) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Start a 0MQ proxy in the current thread, with a control socket.","sig":null,"attributes":[{"value":"/ Start a 0MQ proxy in the current thread, with a control socket.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":38983,"byte_end":39050,"line_start":1111,"line_end":1111,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":39051,"byte_end":39054,"line_start":1112,"line_end":1112,"column_start":1,"column_end":4}},{"value":"/ If PAUSE is received on the control socket, the proxy suspends its activities. If RESUME is received,","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":39055,"byte_end":39160,"line_start":1113,"line_end":1113,"column_start":1,"column_end":106}},{"value":"/ it goes on. If TERMINATE is received, it terminates smoothly. At start, the proxy runs normally","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":39161,"byte_end":39260,"line_start":1114,"line_end":1114,"column_start":1,"column_end":100}},{"value":"/ as if `proxy` was used.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":39261,"byte_end":39288,"line_start":1115,"line_end":1115,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":335},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":39720,"byte_end":39748,"line_start":1130,"line_end":1130,"column_start":8,"column_end":36},"name":"proxy_steerable_with_capture","qualname":"::proxy_steerable_with_capture","value":"pub fn proxy_steerable_with_capture(&mut Socket, &mut Socket, &mut Socket,\n                                    &mut Socket) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Start a 0MQ proxy in the current thread, with capture and control sockets.","sig":null,"attributes":[{"value":"/ Start a 0MQ proxy in the current thread, with capture and control sockets.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":39551,"byte_end":39629,"line_start":1127,"line_end":1127,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":39630,"byte_end":39633,"line_start":1128,"line_end":1128,"column_start":1,"column_end":4}},{"value":"/ Provides a steerable proxy with a capture socket. See `proxy_with_capture`","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":39634,"byte_end":39712,"line_start":1129,"line_end":1129,"column_start":1,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":336},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40561,"byte_end":40564,"line_start":1157,"line_end":1157,"column_start":8,"column_end":11},"name":"has","qualname":"::has","value":"pub fn has(&str) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Return true if the used 0MQ library has the given capability.","sig":null,"attributes":[{"value":"/ Return true if the used 0MQ library has the given capability.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40011,"byte_end":40076,"line_start":1142,"line_end":1142,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40077,"byte_end":40080,"line_start":1143,"line_end":1143,"column_start":1,"column_end":4}},{"value":"/ The return value is always the `Some` variant; it used to return","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40081,"byte_end":40149,"line_start":1144,"line_end":1144,"column_start":1,"column_end":69}},{"value":"/ `None` for older, now unsupported versions of 0MQ that didn't have","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40150,"byte_end":40220,"line_start":1145,"line_end":1145,"column_start":1,"column_end":71}},{"value":"/ the wrapped `zmq_has` function. Thus, for code that requires `zmq`","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40221,"byte_end":40291,"line_start":1146,"line_end":1146,"column_start":1,"column_end":71}},{"value":"/ version 0.9.0 or newer, you can safely call `unwrap` on the return","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40292,"byte_end":40362,"line_start":1147,"line_end":1147,"column_start":1,"column_end":71}},{"value":"/ value.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40363,"byte_end":40373,"line_start":1148,"line_end":1148,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40374,"byte_end":40377,"line_start":1149,"line_end":1149,"column_start":1,"column_end":4}},{"value":"/ For a list of capabilities, please consult the `zmq_has` manual","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40378,"byte_end":40445,"line_start":1150,"line_end":1150,"column_start":1,"column_end":68}},{"value":"/ page.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40446,"byte_end":40455,"line_start":1151,"line_end":1151,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40456,"byte_end":40459,"line_start":1152,"line_end":1152,"column_start":1,"column_end":4}},{"value":"/ # Compatibility","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40460,"byte_end":40479,"line_start":1153,"line_end":1153,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40480,"byte_end":40483,"line_start":1154,"line_end":1154,"column_start":1,"column_end":4}},{"value":"/ In the `zmq` 0.10.0, this function will simply return `bool`.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40484,"byte_end":40549,"line_start":1155,"line_end":1155,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40550,"byte_end":40553,"line_start":1156,"line_end":1156,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":733},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40985,"byte_end":40997,"line_start":1168,"line_end":1168,"column_start":12,"column_end":24},"name":"CurveKeyPair","qualname":"::CurveKeyPair","value":"CurveKeyPair { public_key, secret_key }","parent":null,"children":[{"krate":0,"index":734},{"krate":0,"index":736}],"decl_id":null,"docs":" A CURVE key pair generated by 0MQ.","sig":null,"attributes":[{"value":"/ A CURVE key pair generated by 0MQ.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40719,"byte_end":40757,"line_start":1162,"line_end":1162,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40758,"byte_end":40761,"line_start":1163,"line_end":1163,"column_start":1,"column_end":4}},{"value":"/ Note that for API consistency reasons, since version 0.9, the key","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40762,"byte_end":40831,"line_start":1164,"line_end":1164,"column_start":1,"column_end":70}},{"value":"/ pair is represented in the binary form. This is in contrast to","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40832,"byte_end":40898,"line_start":1165,"line_end":1165,"column_start":1,"column_end":67}},{"value":"/ libzmq, which returns the z85-encoded representation.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":40899,"byte_end":40956,"line_start":1166,"line_end":1166,"column_start":1,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":734},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":41008,"byte_end":41018,"line_start":1169,"line_end":1169,"column_start":9,"column_end":19},"name":"public_key","qualname":"::CurveKeyPair::public_key","value":"[u8; 32]","parent":{"krate":0,"index":733},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":736},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":41038,"byte_end":41048,"line_start":1170,"line_end":1170,"column_start":9,"column_end":19},"name":"secret_key","qualname":"::CurveKeyPair::secret_key","value":"[u8; 32]","parent":{"krate":0,"index":733},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":41125,"byte_end":41128,"line_start":1175,"line_end":1175,"column_start":12,"column_end":15},"name":"new","qualname":"<CurveKeyPair>::new","value":"pub fn new() -> Result<CurveKeyPair>","parent":null,"children":[],"decl_id":null,"docs":" Create a new key pair.\n","sig":null,"attributes":[{"value":"/ Create a new key pair.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":41087,"byte_end":41113,"line_start":1174,"line_end":1174,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":741},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":42261,"byte_end":42270,"line_start":1211,"line_end":1211,"column_start":5,"column_end":14},"name":"BadLength","qualname":"::EncodeError::BadLength","value":"EncodeError::BadLength","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":743},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":42276,"byte_end":42289,"line_start":1212,"line_end":1212,"column_start":5,"column_end":18},"name":"FromUtf8Error","qualname":"::EncodeError::FromUtf8Error","value":"EncodeError::FromUtf8Error(FromUtf8Error)","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":740},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":42243,"byte_end":42254,"line_start":1210,"line_end":1210,"column_start":10,"column_end":21},"name":"EncodeError","qualname":"::EncodeError","value":"pub enum EncodeError { BadLength, FromUtf8Error(FromUtf8Error), }","parent":null,"children":[{"krate":0,"index":741},{"krate":0,"index":743}],"decl_id":null,"docs":" Errors that can occur while encoding Z85.\n","sig":null,"attributes":[{"value":"/ Errors that can occur while encoding Z85.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":42171,"byte_end":42216,"line_start":1208,"line_end":1208,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":349},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":43251,"byte_end":43261,"line_start":1245,"line_end":1245,"column_start":8,"column_end":18},"name":"z85_encode","qualname":"::z85_encode","value":"pub fn z85_encode(&[u8]) -> result::Result<String, EncodeError>","parent":null,"children":[],"decl_id":null,"docs":" Encode a binary key as Z85 printable text.","sig":null,"attributes":[{"value":"/ Encode a binary key as Z85 printable text.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":43014,"byte_end":43060,"line_start":1239,"line_end":1239,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":43061,"byte_end":43064,"line_start":1240,"line_end":1240,"column_start":1,"column_end":4}},{"value":"/ Z85 is an encoding similar to Base64, but operates on 4-byte chunks,","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":43065,"byte_end":43137,"line_start":1241,"line_end":1241,"column_start":1,"column_end":73}},{"value":"/ which are encoded into 5-byte sequences.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":43138,"byte_end":43182,"line_start":1242,"line_end":1242,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":43183,"byte_end":43186,"line_start":1243,"line_end":1243,"column_start":1,"column_end":4}},{"value":"/ The input slice *must* have a length divisible by 4.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":43187,"byte_end":43243,"line_start":1244,"line_end":1244,"column_start":1,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":749},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":43887,"byte_end":43896,"line_start":1269,"line_end":1269,"column_start":5,"column_end":14},"name":"BadLength","qualname":"::DecodeError::BadLength","value":"DecodeError::BadLength","parent":{"krate":0,"index":748},"children":[],"decl_id":null,"docs":" The input string slice's length was not a multiple of 5.\n","sig":null,"attributes":[{"value":"/ The input string slice's length was not a multiple of 5.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":43822,"byte_end":43882,"line_start":1268,"line_end":1268,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":751},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":43957,"byte_end":43965,"line_start":1271,"line_end":1271,"column_start":5,"column_end":13},"name":"NulError","qualname":"::DecodeError::NulError","value":"DecodeError::NulError(ffi::NulError)","parent":{"krate":0,"index":748},"children":[],"decl_id":null,"docs":" The input string slice had embedded NUL bytes.\n","sig":null,"attributes":[{"value":"/ The input string slice had embedded NUL bytes.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":43902,"byte_end":43952,"line_start":1270,"line_end":1270,"column_start":5,"column_end":55}}]},{"kind":"Enum","id":{"krate":0,"index":748},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":43804,"byte_end":43815,"line_start":1267,"line_end":1267,"column_start":10,"column_end":21},"name":"DecodeError","qualname":"::DecodeError","value":"pub enum DecodeError { BadLength, NulError(ffi::NulError), }","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":751}],"decl_id":null,"docs":" Errors that can occur while decoding Z85.\n","sig":null,"attributes":[{"value":"/ Errors that can occur while decoding Z85.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":43732,"byte_end":43777,"line_start":1265,"line_end":1265,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":356},"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":44884,"byte_end":44894,"line_start":1304,"line_end":1304,"column_start":8,"column_end":18},"name":"z85_decode","qualname":"::z85_decode","value":"pub fn z85_decode(&str) -> result::Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Decode a binary key from Z85-encoded text.","sig":null,"attributes":[{"value":"/ Decode a binary key from Z85-encoded text.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":44668,"byte_end":44714,"line_start":1298,"line_end":1298,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":44715,"byte_end":44718,"line_start":1299,"line_end":1299,"column_start":1,"column_end":4}},{"value":"/ The input string must have a length divisible by 5.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":44719,"byte_end":44774,"line_start":1300,"line_end":1300,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":44775,"byte_end":44778,"line_start":1301,"line_end":1301,"column_start":1,"column_end":4}},{"value":"/ Note that 0MQ silently accepts characters outside the range defined for","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":44779,"byte_end":44854,"line_start":1302,"line_end":1302,"column_start":1,"column_end":76}},{"value":"/ the Z85 encoding.","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":44855,"byte_end":44876,"line_start":1303,"line_end":1303,"column_start":1,"column_end":22}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":45966,"byte_end":45973,"line_start":25,"line_end":25,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":46148,"byte_end":46155,"line_start":34,"line_end":34,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":46401,"byte_end":46408,"line_start":44,"line_end":44,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":49880,"byte_end":49887,"line_start":143,"line_end":143,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":50327,"byte_end":50334,"line_start":158,"line_end":158,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":50432,"byte_end":50439,"line_start":164,"line_end":164,"column_start":13,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":50462,"byte_end":50469,"line_start":166,"line_end":166,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":50870,"byte_end":50877,"line_start":178,"line_end":178,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":51208,"byte_end":51215,"line_start":189,"line_end":189,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":51407,"byte_end":51414,"line_start":196,"line_end":196,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":52006,"byte_end":52013,"line_start":218,"line_end":218,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":52201,"byte_end":52208,"line_start":225,"line_end":225,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":52397,"byte_end":52404,"line_start":232,"line_end":232,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/sockopt.rs","byte_start":55382,"byte_end":55388,"line_start":110,"line_end":110,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/sockopt.rs","byte_start":56304,"byte_end":56314,"line_start":147,"line_end":147,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":953,"byte_end":963,"line_start":58,"line_end":58,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":3375,"byte_end":3386,"line_start":118,"line_end":118,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5733,"byte_end":5738,"line_start":200,"line_end":200,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":10244,"byte_end":10249,"line_start":305,"line_end":305,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":10534,"byte_end":10539,"line_start":315,"line_end":315,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":10857,"byte_end":10862,"line_start":325,"line_end":325,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":11244,"byte_end":11249,"line_start":339,"line_end":339,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":12631,"byte_end":12641,"line_start":384,"line_end":384,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":12786,"byte_end":12796,"line_start":391,"line_end":391,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":12821,"byte_end":12831,"line_start":392,"line_end":392,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":12850,"byte_end":12860,"line_start":394,"line_end":394,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":14027,"byte_end":14034,"line_start":429,"line_end":429,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":15084,"byte_end":15091,"line_start":465,"line_end":465,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":15446,"byte_end":15452,"line_start":481,"line_end":481,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":15471,"byte_end":15477,"line_start":483,"line_end":483,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18119,"byte_end":18120,"line_start":572,"line_end":572,"column_start":22,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18378,"byte_end":18384,"line_start":583,"line_end":583,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":311},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":36126,"byte_end":36134,"line_start":1024,"line_end":1024,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":41068,"byte_end":41080,"line_start":1173,"line_end":1173,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":42338,"byte_end":42349,"line_start":1215,"line_end":1215,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":42465,"byte_end":42476,"line_start":1221,"line_end":1221,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":42796,"byte_end":42807,"line_start":1230,"line_end":1230,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":44014,"byte_end":44025,"line_start":1274,"line_end":1274,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":44136,"byte_end":44147,"line_start":1280,"line_end":1280,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":44455,"byte_end":44466,"line_start":1289,"line_end":1289,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":45966,"byte_end":45973,"line_start":25,"line_end":25,"column_start":15,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":3258}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":46148,"byte_end":46155,"line_start":34,"line_end":34,"column_start":21,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":9553}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":46401,"byte_end":46408,"line_start":44,"line_end":44,"column_start":6,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":91},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":49880,"byte_end":49887,"line_start":143,"line_end":143,"column_start":16,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":3234}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":50327,"byte_end":50334,"line_start":158,"line_end":158,"column_start":20,"column_end":27},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":2670}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":50432,"byte_end":50439,"line_start":164,"line_end":164,"column_start":13,"column_end":20},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":50462,"byte_end":50469,"line_start":166,"line_end":166,"column_start":19,"column_end":26},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":3247}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":50870,"byte_end":50877,"line_start":178,"line_end":178,"column_start":29,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":51208,"byte_end":51215,"line_start":189,"line_end":189,"column_start":24,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":51407,"byte_end":51414,"line_start":196,"line_end":196,"column_start":26,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":52006,"byte_end":52013,"line_start":218,"line_end":218,"column_start":28,"column_end":35},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":52201,"byte_end":52208,"line_start":225,"line_end":225,"column_start":31,"column_end":38},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/message.rs","byte_start":52397,"byte_end":52404,"line_start":232,"line_end":232,"column_start":29,"column_end":36},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/sockopt.rs","byte_start":55382,"byte_end":55388,"line_start":110,"line_end":110,"column_start":21,"column_end":27},"kind":{"Impl":{"id":20}},"from":{"krate":2,"index":45092},"to":{"krate":0,"index":180}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/sockopt.rs","byte_start":56304,"byte_end":56314,"line_start":147,"line_end":147,"column_start":17,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":636},"to":{"krate":0,"index":178}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":953,"byte_end":963,"line_start":58,"line_end":58,"column_start":6,"column_end":16},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":3375,"byte_end":3386,"line_start":118,"line_end":118,"column_start":6,"column_end":17},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":5733,"byte_end":5738,"line_start":200,"line_end":200,"column_start":6,"column_end":11},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":478},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":10244,"byte_end":10249,"line_start":305,"line_end":305,"column_start":28,"column_end":33},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":478},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":10534,"byte_end":10539,"line_start":315,"line_end":315,"column_start":28,"column_end":33},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":478},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":10857,"byte_end":10862,"line_start":325,"line_end":325,"column_start":21,"column_end":26},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":478},"to":{"krate":2,"index":9553}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":11244,"byte_end":11249,"line_start":339,"line_end":339,"column_start":31,"column_end":36},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":3816},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":12631,"byte_end":12641,"line_start":384,"line_end":384,"column_start":6,"column_end":16},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":241},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":12786,"byte_end":12796,"line_start":391,"line_end":391,"column_start":22,"column_end":32},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":241},"to":{"krate":2,"index":3019}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":12821,"byte_end":12831,"line_start":392,"line_end":392,"column_start":22,"column_end":32},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":241},"to":{"krate":2,"index":3031}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":12850,"byte_end":12860,"line_start":394,"line_end":394,"column_start":15,"column_end":25},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":241},"to":{"krate":2,"index":3258}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":14027,"byte_end":14034,"line_start":429,"line_end":429,"column_start":6,"column_end":13},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":544},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":15084,"byte_end":15091,"line_start":465,"line_end":465,"column_start":18,"column_end":25},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":544},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":15446,"byte_end":15452,"line_start":481,"line_end":481,"column_start":22,"column_end":28},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":255},"to":{"krate":2,"index":3019}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":15471,"byte_end":15477,"line_start":483,"line_end":483,"column_start":15,"column_end":21},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":255},"to":{"krate":2,"index":3258}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18119,"byte_end":18120,"line_start":572,"line_end":572,"column_start":22,"column_end":23},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":269},"to":{"krate":0,"index":266}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":18378,"byte_end":18384,"line_start":583,"line_end":583,"column_start":6,"column_end":12},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":255},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":36126,"byte_end":36134,"line_start":1024,"line_end":1024,"column_start":10,"column_end":18},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":41068,"byte_end":41080,"line_start":1173,"line_end":1173,"column_start":6,"column_end":18},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":733},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":42338,"byte_end":42349,"line_start":1215,"line_end":1215,"column_start":30,"column_end":41},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":740},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":42465,"byte_end":42476,"line_start":1221,"line_end":1221,"column_start":23,"column_end":34},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":740},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":42796,"byte_end":42807,"line_start":1230,"line_end":1230,"column_start":28,"column_end":39},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":740},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":44014,"byte_end":44025,"line_start":1274,"line_end":1274,"column_start":30,"column_end":41},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":748},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":44136,"byte_end":44147,"line_start":1280,"line_end":1280,"column_start":23,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":748},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/guilhem/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-0.9.2/src/lib.rs","byte_start":44455,"byte_end":44466,"line_start":1289,"line_end":1289,"column_start":28,"column_end":39},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":748},"to":{"krate":1,"index":2338}}]}