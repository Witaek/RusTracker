/* automatically generated by rust-bindgen 0.57.0 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const SOAPY_SDR_TX: u32 = 0;
pub const SOAPY_SDR_RX: u32 = 1;
pub const SOAPY_SDR_END_BURST: u32 = 2;
pub const SOAPY_SDR_HAS_TIME: u32 = 4;
pub const SOAPY_SDR_END_ABRUPT: u32 = 8;
pub const SOAPY_SDR_ONE_PACKET: u32 = 16;
pub const SOAPY_SDR_MORE_FRAGMENTS: u32 = 32;
pub const SOAPY_SDR_WAIT_TRIGGER: u32 = 64;
pub const SOAPY_SDR_TIMEOUT: i32 = -1;
pub const SOAPY_SDR_STREAM_ERROR: i32 = -2;
pub const SOAPY_SDR_CORRUPTION: i32 = -3;
pub const SOAPY_SDR_OVERFLOW: i32 = -4;
pub const SOAPY_SDR_NOT_SUPPORTED: i32 = -5;
pub const SOAPY_SDR_TIME_ERROR: i32 = -6;
pub const SOAPY_SDR_UNDERFLOW: i32 = -7;
pub const __GNUC_VA_LIST: u32 = 1;
pub const SOAPY_SDR_CF64: &'static [u8; 5usize] = b"CF64\0";
pub const SOAPY_SDR_CF32: &'static [u8; 5usize] = b"CF32\0";
pub const SOAPY_SDR_CS32: &'static [u8; 5usize] = b"CS32\0";
pub const SOAPY_SDR_CU32: &'static [u8; 5usize] = b"CU32\0";
pub const SOAPY_SDR_CS16: &'static [u8; 5usize] = b"CS16\0";
pub const SOAPY_SDR_CU16: &'static [u8; 5usize] = b"CU16\0";
pub const SOAPY_SDR_CS12: &'static [u8; 5usize] = b"CS12\0";
pub const SOAPY_SDR_CU12: &'static [u8; 5usize] = b"CU12\0";
pub const SOAPY_SDR_CS8: &'static [u8; 4usize] = b"CS8\0";
pub const SOAPY_SDR_CU8: &'static [u8; 4usize] = b"CU8\0";
pub const SOAPY_SDR_CS4: &'static [u8; 4usize] = b"CS4\0";
pub const SOAPY_SDR_CU4: &'static [u8; 4usize] = b"CU4\0";
pub const SOAPY_SDR_F64: &'static [u8; 4usize] = b"F64\0";
pub const SOAPY_SDR_F32: &'static [u8; 4usize] = b"F32\0";
pub const SOAPY_SDR_S32: &'static [u8; 4usize] = b"S32\0";
pub const SOAPY_SDR_U32: &'static [u8; 4usize] = b"U32\0";
pub const SOAPY_SDR_S16: &'static [u8; 4usize] = b"S16\0";
pub const SOAPY_SDR_U16: &'static [u8; 4usize] = b"U16\0";
pub const SOAPY_SDR_S8: &'static [u8; 3usize] = b"S8\0";
pub const SOAPY_SDR_U8: &'static [u8; 3usize] = b"U8\0";
pub const SOAPY_SDR_API_VERSION: u32 = 458753;
pub const SOAPY_SDR_ABI_VERSION: &'static [u8; 4usize] = b"0.7\0";
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoapySDRRange {
    pub minimum: f64,
    pub maximum: f64,
    pub step: f64,
}
#[test]
fn bindgen_test_layout_SoapySDRRange() {
    assert_eq!(
        ::std::mem::size_of::<SoapySDRRange>(),
        24usize,
        concat!("Size of: ", stringify!(SoapySDRRange))
    );
    assert_eq!(
        ::std::mem::align_of::<SoapySDRRange>(),
        8usize,
        concat!("Alignment of ", stringify!(SoapySDRRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SoapySDRRange>())).minimum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SoapySDRRange),
            "::",
            stringify!(minimum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SoapySDRRange>())).maximum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SoapySDRRange),
            "::",
            stringify!(maximum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SoapySDRRange>())).step as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SoapySDRRange),
            "::",
            stringify!(step)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoapySDRKwargs {
    pub size: usize,
    pub keys: *mut *mut ::std::os::raw::c_char,
    pub vals: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SoapySDRKwargs() {
    assert_eq!(
        ::std::mem::size_of::<SoapySDRKwargs>(),
        24usize,
        concat!("Size of: ", stringify!(SoapySDRKwargs))
    );
    assert_eq!(
        ::std::mem::align_of::<SoapySDRKwargs>(),
        8usize,
        concat!("Alignment of ", stringify!(SoapySDRKwargs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SoapySDRKwargs>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SoapySDRKwargs),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SoapySDRKwargs>())).keys as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SoapySDRKwargs),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SoapySDRKwargs>())).vals as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SoapySDRKwargs),
            "::",
            stringify!(vals)
        )
    );
}
extern "C" {
    pub fn SoapySDRKwargs_fromString(markup: *const ::std::os::raw::c_char) -> SoapySDRKwargs;
}
extern "C" {
    pub fn SoapySDRKwargs_toString(args: *const SoapySDRKwargs) -> *mut ::std::os::raw::c_char;
}
pub const SoapySDRArgInfoType_SOAPY_SDR_ARG_INFO_BOOL: SoapySDRArgInfoType = 0;
pub const SoapySDRArgInfoType_SOAPY_SDR_ARG_INFO_INT: SoapySDRArgInfoType = 1;
pub const SoapySDRArgInfoType_SOAPY_SDR_ARG_INFO_FLOAT: SoapySDRArgInfoType = 2;
pub const SoapySDRArgInfoType_SOAPY_SDR_ARG_INFO_STRING: SoapySDRArgInfoType = 3;
pub type SoapySDRArgInfoType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoapySDRArgInfo {
    pub key: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub units: *mut ::std::os::raw::c_char,
    pub type_: SoapySDRArgInfoType,
    pub range: SoapySDRRange,
    pub numOptions: usize,
    pub options: *mut *mut ::std::os::raw::c_char,
    pub optionNames: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SoapySDRArgInfo() {
    assert_eq!(
        ::std::mem::size_of::<SoapySDRArgInfo>(),
        96usize,
        concat!("Size of: ", stringify!(SoapySDRArgInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SoapySDRArgInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SoapySDRArgInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SoapySDRArgInfo>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SoapySDRArgInfo),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SoapySDRArgInfo>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SoapySDRArgInfo),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SoapySDRArgInfo>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SoapySDRArgInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SoapySDRArgInfo>())).description as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SoapySDRArgInfo),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SoapySDRArgInfo>())).units as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SoapySDRArgInfo),
            "::",
            stringify!(units)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SoapySDRArgInfo>())).type_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SoapySDRArgInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SoapySDRArgInfo>())).range as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SoapySDRArgInfo),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SoapySDRArgInfo>())).numOptions as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SoapySDRArgInfo),
            "::",
            stringify!(numOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SoapySDRArgInfo>())).options as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SoapySDRArgInfo),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SoapySDRArgInfo>())).optionNames as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SoapySDRArgInfo),
            "::",
            stringify!(optionNames)
        )
    );
}
extern "C" {
    pub fn SoapySDRStrings_clear(elems: *mut *mut *mut ::std::os::raw::c_char, length: usize);
}
extern "C" {
    pub fn SoapySDRKwargs_set(
        args: *mut SoapySDRKwargs,
        key: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRKwargs_get(
        args: *const SoapySDRKwargs,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRKwargs_clear(args: *mut SoapySDRKwargs);
}
extern "C" {
    pub fn SoapySDRKwargsList_clear(args: *mut SoapySDRKwargs, length: usize);
}
extern "C" {
    pub fn SoapySDRArgInfo_clear(info: *mut SoapySDRArgInfo);
}
extern "C" {
    pub fn SoapySDRArgInfoList_clear(info: *mut SoapySDRArgInfo, length: usize);
}
extern "C" {
    pub fn SoapySDR_errToStr(errorCode: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoapySDRDevice {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoapySDRStream {
    _unused: [u8; 0],
}
extern "C" {
    pub fn SoapySDRDevice_lastStatus() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_lastError() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_enumerate(
        args: *const SoapySDRKwargs,
        length: *mut usize,
    ) -> *mut SoapySDRKwargs;
}
extern "C" {
    pub fn SoapySDRDevice_enumerateStrArgs(
        args: *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> *mut SoapySDRKwargs;
}
extern "C" {
    pub fn SoapySDRDevice_make(args: *const SoapySDRKwargs) -> *mut SoapySDRDevice;
}
extern "C" {
    pub fn SoapySDRDevice_makeStrArgs(args: *const ::std::os::raw::c_char) -> *mut SoapySDRDevice;
}
extern "C" {
    pub fn SoapySDRDevice_unmake(device: *mut SoapySDRDevice) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_make_list(
        argsList: *const SoapySDRKwargs,
        length: usize,
    ) -> *mut *mut SoapySDRDevice;
}
extern "C" {
    pub fn SoapySDRDevice_unmake_list(
        devices: *mut *mut SoapySDRDevice,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getDriverKey(
        device: *const SoapySDRDevice,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_getHardwareKey(
        device: *const SoapySDRDevice,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_getHardwareInfo(device: *const SoapySDRDevice) -> SoapySDRKwargs;
}
extern "C" {
    pub fn SoapySDRDevice_setFrontendMapping(
        device: *mut SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        mapping: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getFrontendMapping(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_getNumChannels(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    pub fn SoapySDRDevice_getChannelInfo(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
    ) -> SoapySDRKwargs;
}
extern "C" {
    pub fn SoapySDRDevice_getFullDuplex(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
    ) -> bool;
}
extern "C" {
    pub fn SoapySDRDevice_getStreamFormats(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        length: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_getNativeStreamFormat(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        fullScale: *mut f64,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_getStreamArgsInfo(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        length: *mut usize,
    ) -> *mut SoapySDRArgInfo;
}
extern "C" {
    pub fn SoapySDRDevice_closeStream(
        device: *mut SoapySDRDevice,
        stream: *mut SoapySDRStream,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getStreamMTU(
        device: *const SoapySDRDevice,
        stream: *mut SoapySDRStream,
    ) -> usize;
}
extern "C" {
    pub fn SoapySDRDevice_activateStream(
        device: *mut SoapySDRDevice,
        stream: *mut SoapySDRStream,
        flags: ::std::os::raw::c_int,
        timeNs: ::std::os::raw::c_longlong,
        numElems: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_deactivateStream(
        device: *mut SoapySDRDevice,
        stream: *mut SoapySDRStream,
        flags: ::std::os::raw::c_int,
        timeNs: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_readStream(
        device: *mut SoapySDRDevice,
        stream: *mut SoapySDRStream,
        buffs: *const *mut ::std::os::raw::c_void,
        numElems: usize,
        flags: *mut ::std::os::raw::c_int,
        timeNs: *mut ::std::os::raw::c_longlong,
        timeoutUs: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_writeStream(
        device: *mut SoapySDRDevice,
        stream: *mut SoapySDRStream,
        buffs: *const *const ::std::os::raw::c_void,
        numElems: usize,
        flags: *mut ::std::os::raw::c_int,
        timeNs: ::std::os::raw::c_longlong,
        timeoutUs: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_readStreamStatus(
        device: *mut SoapySDRDevice,
        stream: *mut SoapySDRStream,
        chanMask: *mut usize,
        flags: *mut ::std::os::raw::c_int,
        timeNs: *mut ::std::os::raw::c_longlong,
        timeoutUs: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getNumDirectAccessBuffers(
        device: *mut SoapySDRDevice,
        stream: *mut SoapySDRStream,
    ) -> usize;
}
extern "C" {
    pub fn SoapySDRDevice_getDirectAccessBufferAddrs(
        device: *mut SoapySDRDevice,
        stream: *mut SoapySDRStream,
        handle: usize,
        buffs: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_acquireReadBuffer(
        device: *mut SoapySDRDevice,
        stream: *mut SoapySDRStream,
        handle: *mut usize,
        buffs: *mut *const ::std::os::raw::c_void,
        flags: *mut ::std::os::raw::c_int,
        timeNs: *mut ::std::os::raw::c_longlong,
        timeoutUs: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_releaseReadBuffer(
        device: *mut SoapySDRDevice,
        stream: *mut SoapySDRStream,
        handle: usize,
    );
}
extern "C" {
    pub fn SoapySDRDevice_acquireWriteBuffer(
        device: *mut SoapySDRDevice,
        stream: *mut SoapySDRStream,
        handle: *mut usize,
        buffs: *mut *mut ::std::os::raw::c_void,
        timeoutUs: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_releaseWriteBuffer(
        device: *mut SoapySDRDevice,
        stream: *mut SoapySDRStream,
        handle: usize,
        numElems: usize,
        flags: *mut ::std::os::raw::c_int,
        timeNs: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn SoapySDRDevice_listAntennas(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        length: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_setAntenna(
        device: *mut SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getAntenna(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_hasDCOffsetMode(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
    ) -> bool;
}
extern "C" {
    pub fn SoapySDRDevice_setDCOffsetMode(
        device: *mut SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        automatic: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getDCOffsetMode(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
    ) -> bool;
}
extern "C" {
    pub fn SoapySDRDevice_hasDCOffset(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
    ) -> bool;
}
extern "C" {
    pub fn SoapySDRDevice_setDCOffset(
        device: *mut SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        offsetI: f64,
        offsetQ: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getDCOffset(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        offsetI: *mut f64,
        offsetQ: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_hasIQBalance(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
    ) -> bool;
}
extern "C" {
    pub fn SoapySDRDevice_setIQBalance(
        device: *mut SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        balanceI: f64,
        balanceQ: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getIQBalance(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        balanceI: *mut f64,
        balanceQ: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_hasFrequencyCorrection(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
    ) -> bool;
}
extern "C" {
    pub fn SoapySDRDevice_setFrequencyCorrection(
        device: *mut SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getFrequencyCorrection(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
    ) -> f64;
}
extern "C" {
    pub fn SoapySDRDevice_listGains(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        length: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_hasGainMode(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
    ) -> bool;
}
extern "C" {
    pub fn SoapySDRDevice_setGainMode(
        device: *mut SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        automatic: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getGainMode(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
    ) -> bool;
}
extern "C" {
    pub fn SoapySDRDevice_setGain(
        device: *mut SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_setGainElement(
        device: *mut SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        name: *const ::std::os::raw::c_char,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getGain(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
    ) -> f64;
}
extern "C" {
    pub fn SoapySDRDevice_getGainElement(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        name: *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn SoapySDRDevice_getGainRange(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
    ) -> SoapySDRRange;
}
extern "C" {
    pub fn SoapySDRDevice_getGainElementRange(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        name: *const ::std::os::raw::c_char,
    ) -> SoapySDRRange;
}
extern "C" {
    pub fn SoapySDRDevice_setFrequency(
        device: *mut SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        frequency: f64,
        args: *const SoapySDRKwargs,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_setFrequencyComponent(
        device: *mut SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        name: *const ::std::os::raw::c_char,
        frequency: f64,
        args: *const SoapySDRKwargs,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getFrequency(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
    ) -> f64;
}
extern "C" {
    pub fn SoapySDRDevice_getFrequencyComponent(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        name: *const ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn SoapySDRDevice_listFrequencies(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        length: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_getFrequencyRange(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        length: *mut usize,
    ) -> *mut SoapySDRRange;
}
extern "C" {
    pub fn SoapySDRDevice_getFrequencyRangeComponent(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        name: *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> *mut SoapySDRRange;
}
extern "C" {
    pub fn SoapySDRDevice_getFrequencyArgsInfo(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        length: *mut usize,
    ) -> *mut SoapySDRArgInfo;
}
extern "C" {
    pub fn SoapySDRDevice_setSampleRate(
        device: *mut SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        rate: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getSampleRate(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
    ) -> f64;
}
extern "C" {
    pub fn SoapySDRDevice_listSampleRates(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        length: *mut usize,
    ) -> *mut f64;
}
extern "C" {
    pub fn SoapySDRDevice_getSampleRateRange(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        length: *mut usize,
    ) -> *mut SoapySDRRange;
}
extern "C" {
    pub fn SoapySDRDevice_setBandwidth(
        device: *mut SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        bw: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getBandwidth(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
    ) -> f64;
}
extern "C" {
    pub fn SoapySDRDevice_listBandwidths(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        length: *mut usize,
    ) -> *mut f64;
}
extern "C" {
    pub fn SoapySDRDevice_getBandwidthRange(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        length: *mut usize,
    ) -> *mut SoapySDRRange;
}
extern "C" {
    pub fn SoapySDRDevice_setMasterClockRate(
        device: *mut SoapySDRDevice,
        rate: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getMasterClockRate(device: *const SoapySDRDevice) -> f64;
}
extern "C" {
    pub fn SoapySDRDevice_getMasterClockRates(
        device: *const SoapySDRDevice,
        length: *mut usize,
    ) -> *mut SoapySDRRange;
}
extern "C" {
    pub fn SoapySDRDevice_listClockSources(
        device: *const SoapySDRDevice,
        length: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_setClockSource(
        device: *mut SoapySDRDevice,
        source: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getClockSource(
        device: *const SoapySDRDevice,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_listTimeSources(
        device: *const SoapySDRDevice,
        length: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_setTimeSource(
        device: *mut SoapySDRDevice,
        source: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_getTimeSource(
        device: *const SoapySDRDevice,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_hasHardwareTime(
        device: *const SoapySDRDevice,
        what: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn SoapySDRDevice_getHardwareTime(
        device: *const SoapySDRDevice,
        what: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn SoapySDRDevice_setHardwareTime(
        device: *mut SoapySDRDevice,
        timeNs: ::std::os::raw::c_longlong,
        what: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_setCommandTime(
        device: *mut SoapySDRDevice,
        timeNs: ::std::os::raw::c_longlong,
        what: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_listSensors(
        device: *const SoapySDRDevice,
        length: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_getSensorInfo(
        device: *const SoapySDRDevice,
        key: *const ::std::os::raw::c_char,
    ) -> SoapySDRArgInfo;
}
extern "C" {
    pub fn SoapySDRDevice_readSensor(
        device: *const SoapySDRDevice,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_listChannelSensors(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        length: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_getChannelSensorInfo(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        key: *const ::std::os::raw::c_char,
    ) -> SoapySDRArgInfo;
}
extern "C" {
    pub fn SoapySDRDevice_readChannelSensor(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_listRegisterInterfaces(
        device: *const SoapySDRDevice,
        length: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_writeRegister(
        device: *mut SoapySDRDevice,
        name: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_uint,
        value: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_readRegister(
        device: *const SoapySDRDevice,
        name: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SoapySDRDevice_writeRegisters(
        device: *mut SoapySDRDevice,
        name: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_uint,
        value: *const ::std::os::raw::c_uint,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_readRegisters(
        device: *const SoapySDRDevice,
        name: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_uint,
        length: *mut usize,
    ) -> *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SoapySDRDevice_getSettingInfo(
        device: *const SoapySDRDevice,
        length: *mut usize,
    ) -> *mut SoapySDRArgInfo;
}
extern "C" {
    pub fn SoapySDRDevice_writeSetting(
        device: *mut SoapySDRDevice,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_readSetting(
        device: *const SoapySDRDevice,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_getChannelSettingInfo(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        length: *mut usize,
    ) -> *mut SoapySDRArgInfo;
}
extern "C" {
    pub fn SoapySDRDevice_writeChannelSetting(
        device: *mut SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_readChannelSetting(
        device: *const SoapySDRDevice,
        direction: ::std::os::raw::c_int,
        channel: usize,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_listGPIOBanks(
        device: *const SoapySDRDevice,
        length: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_writeGPIO(
        device: *mut SoapySDRDevice,
        bank: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_writeGPIOMasked(
        device: *mut SoapySDRDevice,
        bank: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_uint,
        mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_readGPIO(
        device: *const SoapySDRDevice,
        bank: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SoapySDRDevice_writeGPIODir(
        device: *mut SoapySDRDevice,
        bank: *const ::std::os::raw::c_char,
        dir: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_writeGPIODirMasked(
        device: *mut SoapySDRDevice,
        bank: *const ::std::os::raw::c_char,
        dir: ::std::os::raw::c_uint,
        mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_readGPIODir(
        device: *const SoapySDRDevice,
        bank: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SoapySDRDevice_writeI2C(
        device: *mut SoapySDRDevice,
        addr: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_char,
        numBytes: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_readI2C(
        device: *mut SoapySDRDevice,
        addr: ::std::os::raw::c_int,
        numBytes: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_transactSPI(
        device: *mut SoapySDRDevice,
        addr: ::std::os::raw::c_int,
        data: ::std::os::raw::c_uint,
        numBits: usize,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SoapySDRDevice_listUARTs(
        device: *const SoapySDRDevice,
        length: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDRDevice_writeUART(
        device: *mut SoapySDRDevice,
        which: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDRDevice_readUART(
        device: *const SoapySDRDevice,
        which: *const ::std::os::raw::c_char,
        timeoutUs: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub const SoapySDRLogLevel_SOAPY_SDR_FATAL: SoapySDRLogLevel = 1;
pub const SoapySDRLogLevel_SOAPY_SDR_CRITICAL: SoapySDRLogLevel = 2;
pub const SoapySDRLogLevel_SOAPY_SDR_ERROR: SoapySDRLogLevel = 3;
pub const SoapySDRLogLevel_SOAPY_SDR_WARNING: SoapySDRLogLevel = 4;
pub const SoapySDRLogLevel_SOAPY_SDR_NOTICE: SoapySDRLogLevel = 5;
pub const SoapySDRLogLevel_SOAPY_SDR_INFO: SoapySDRLogLevel = 6;
pub const SoapySDRLogLevel_SOAPY_SDR_DEBUG: SoapySDRLogLevel = 7;
pub const SoapySDRLogLevel_SOAPY_SDR_TRACE: SoapySDRLogLevel = 8;
pub const SoapySDRLogLevel_SOAPY_SDR_SSI: SoapySDRLogLevel = 9;
pub type SoapySDRLogLevel = ::std::os::raw::c_uint;
extern "C" {
    pub fn SoapySDR_log(logLevel: SoapySDRLogLevel, message: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn SoapySDR_vlogf(
        logLevel: SoapySDRLogLevel,
        format: *const ::std::os::raw::c_char,
        argList: *mut __va_list_tag,
    );
}
pub type SoapySDRLogHandler = ::std::option::Option<
    unsafe extern "C" fn(logLevel: SoapySDRLogLevel, message: *const ::std::os::raw::c_char),
>;
extern "C" {
    pub fn SoapySDR_registerLogHandler(handler: SoapySDRLogHandler);
}
extern "C" {
    pub fn SoapySDR_setLogLevel(logLevel: SoapySDRLogLevel);
}
extern "C" {
    pub fn SoapySDR_formatToSize(format: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn SoapySDR_getRootPath() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDR_listSearchPaths(length: *mut usize) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDR_listModules(length: *mut usize) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDR_listModulesPath(
        path: *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDR_loadModule(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDR_getLoaderResult(path: *const ::std::os::raw::c_char) -> SoapySDRKwargs;
}
extern "C" {
    pub fn SoapySDR_getModuleVersion(
        path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDR_unloadModule(
        path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDR_loadModules();
}
extern "C" {
    pub fn SoapySDR_ticksToTimeNs(
        ticks: ::std::os::raw::c_longlong,
        rate: f64,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn SoapySDR_timeNsToTicks(
        timeNs: ::std::os::raw::c_longlong,
        rate: f64,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn SoapySDR_getAPIVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDR_getABIVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SoapySDR_getLibVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn _rust_wrapper_SoapySDRDevice_setupStream(
        device: *mut SoapySDRDevice,
        out_stream: *mut *mut SoapySDRStream,
        direction: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        channels: *const usize,
        numChans: usize,
        args: *const SoapySDRKwargs,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SoapySDR_free(ptr: *mut ::std::os::raw::c_void);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
